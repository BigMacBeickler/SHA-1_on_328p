
SHA-1_on_328p.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000018c  00000200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000018c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000202  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000234  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000943  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007b8  00000000  00000000  00000c0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000042b  00000000  00000000  000013c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  000017f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000447  00000000  00000000  0000186c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000008e  00000000  00000000  00001cb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001d41  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e8       	ldi	r30, 0x8C	; 140
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 30       	cpi	r26, 0x02	; 2
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 c4 00 	jmp	0x188	; 0x188 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:

int main(void)
{
	//interrupts enabled after init
	//sei();
	usart_init(9600);
  a6:	80 e8       	ldi	r24, 0x80	; 128
  a8:	95 e2       	ldi	r25, 0x25	; 37
  aa:	0e 94 6c 00 	call	0xd8	; 0xd8 <usart_init>
	DDRB |= (1 << PB5);  // Setze PB0 als Ausgang (LED-Pin)
  ae:	84 b1       	in	r24, 0x04	; 4
  b0:	80 62       	ori	r24, 0x20	; 32
  b2:	84 b9       	out	0x04, r24	; 4
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b4:	2f ef       	ldi	r18, 0xFF	; 255
  b6:	89 e6       	ldi	r24, 0x69	; 105
  b8:	98 e1       	ldi	r25, 0x18	; 24
  ba:	21 50       	subi	r18, 0x01	; 1
  bc:	80 40       	sbci	r24, 0x00	; 0
  be:	90 40       	sbci	r25, 0x00	; 0
  c0:	e1 f7       	brne	.-8      	; 0xba <main+0x14>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <main+0x1e>
  c4:	00 00       	nop

    /* Replace with your application code */
    while (1) 
    {
		_delay_ms(500);
	UART_transmit(test);	
  c6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  ca:	0e 94 9a 00 	call	0x134	; 0x134 <UART_transmit>
	PORTB ^= (1 << PB5); // Toggle LED
  ce:	95 b1       	in	r25, 0x05	; 5
  d0:	80 e2       	ldi	r24, 0x20	; 32
  d2:	89 27       	eor	r24, r25
  d4:	85 b9       	out	0x05, r24	; 5
  d6:	ee cf       	rjmp	.-36     	; 0xb4 <main+0xe>

000000d8 <usart_init>:
	/* ' for char litarals aka asci chars and " for strings with \0 terminator */
	if(1){
		return (rxBuffer[pos-1] == '#' && rxBuffer[pos] == '!');
	}
	return 0;
}
  d8:	a0 e0       	ldi	r26, 0x00	; 0
  da:	b0 e0       	ldi	r27, 0x00	; 0
  dc:	88 0f       	add	r24, r24
  de:	99 1f       	adc	r25, r25
  e0:	aa 1f       	adc	r26, r26
  e2:	bb 1f       	adc	r27, r27
  e4:	88 0f       	add	r24, r24
  e6:	99 1f       	adc	r25, r25
  e8:	aa 1f       	adc	r26, r26
  ea:	bb 1f       	adc	r27, r27
  ec:	9c 01       	movw	r18, r24
  ee:	ad 01       	movw	r20, r26
  f0:	22 0f       	add	r18, r18
  f2:	33 1f       	adc	r19, r19
  f4:	44 1f       	adc	r20, r20
  f6:	55 1f       	adc	r21, r21
  f8:	22 0f       	add	r18, r18
  fa:	33 1f       	adc	r19, r19
  fc:	44 1f       	adc	r20, r20
  fe:	55 1f       	adc	r21, r21
 100:	60 e0       	ldi	r22, 0x00	; 0
 102:	74 e2       	ldi	r23, 0x24	; 36
 104:	84 ef       	ldi	r24, 0xF4	; 244
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	0e 94 a2 00 	call	0x144	; 0x144 <__udivmodsi4>
 10c:	21 50       	subi	r18, 0x01	; 1
 10e:	31 09       	sbc	r19, r1
 110:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 114:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 118:	e1 ec       	ldi	r30, 0xC1	; 193
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	88 e1       	ldi	r24, 0x18	; 24
 11e:	80 83       	st	Z, r24
 120:	a2 ec       	ldi	r26, 0xC2	; 194
 122:	b0 e0       	ldi	r27, 0x00	; 0
 124:	86 e0       	ldi	r24, 0x06	; 6
 126:	8c 93       	st	X, r24
 128:	80 e2       	ldi	r24, 0x20	; 32
 12a:	8c 93       	st	X, r24
 12c:	80 e8       	ldi	r24, 0x80	; 128
 12e:	80 83       	st	Z, r24
 130:	78 94       	sei
 132:	08 95       	ret

00000134 <UART_transmit>:

}*/

void UART_transmit(char x) {
	
	while (!(UCSR0A & (1 << UDRE0))); // Wait for empty transmit buffer
 134:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 138:	95 ff       	sbrs	r25, 5
 13a:	fc cf       	rjmp	.-8      	; 0x134 <UART_transmit>

	UDR0 = (x+1); // Send data
 13c:	8f 5f       	subi	r24, 0xFF	; 255
 13e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 142:	08 95       	ret

00000144 <__udivmodsi4>:
 144:	a1 e2       	ldi	r26, 0x21	; 33
 146:	1a 2e       	mov	r1, r26
 148:	aa 1b       	sub	r26, r26
 14a:	bb 1b       	sub	r27, r27
 14c:	fd 01       	movw	r30, r26
 14e:	0d c0       	rjmp	.+26     	; 0x16a <__udivmodsi4_ep>

00000150 <__udivmodsi4_loop>:
 150:	aa 1f       	adc	r26, r26
 152:	bb 1f       	adc	r27, r27
 154:	ee 1f       	adc	r30, r30
 156:	ff 1f       	adc	r31, r31
 158:	a2 17       	cp	r26, r18
 15a:	b3 07       	cpc	r27, r19
 15c:	e4 07       	cpc	r30, r20
 15e:	f5 07       	cpc	r31, r21
 160:	20 f0       	brcs	.+8      	; 0x16a <__udivmodsi4_ep>
 162:	a2 1b       	sub	r26, r18
 164:	b3 0b       	sbc	r27, r19
 166:	e4 0b       	sbc	r30, r20
 168:	f5 0b       	sbc	r31, r21

0000016a <__udivmodsi4_ep>:
 16a:	66 1f       	adc	r22, r22
 16c:	77 1f       	adc	r23, r23
 16e:	88 1f       	adc	r24, r24
 170:	99 1f       	adc	r25, r25
 172:	1a 94       	dec	r1
 174:	69 f7       	brne	.-38     	; 0x150 <__udivmodsi4_loop>
 176:	60 95       	com	r22
 178:	70 95       	com	r23
 17a:	80 95       	com	r24
 17c:	90 95       	com	r25
 17e:	9b 01       	movw	r18, r22
 180:	ac 01       	movw	r20, r24
 182:	bd 01       	movw	r22, r26
 184:	cf 01       	movw	r24, r30
 186:	08 95       	ret

00000188 <_exit>:
 188:	f8 94       	cli

0000018a <__stop_program>:
 18a:	ff cf       	rjmp	.-2      	; 0x18a <__stop_program>
