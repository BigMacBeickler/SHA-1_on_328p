
SHA-1_on_328p.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003c  00800100  00000dae  00000e42  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000dae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000406  0080013c  0080013c  00000e7e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e7e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000eb0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00000ef0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000121f  00000000  00000000  00000fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009ca  00000000  00000000  00002207  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009db  00000000  00000000  00002bd1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000288  00000000  00000000  000035ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000050c  00000000  00000000  00003834  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000aec  00000000  00000000  00003d40  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  0000482c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 7e 06 	jmp	0xcfc	; 0xcfc <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ea       	ldi	r30, 0xAE	; 174
  7c:	fd e0       	ldi	r31, 0x0D	; 13
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 33       	cpi	r26, 0x3C	; 60
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	25 e0       	ldi	r18, 0x05	; 5
  8c:	ac e3       	ldi	r26, 0x3C	; 60
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 34       	cpi	r26, 0x42	; 66
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 5c 00 	call	0xb8	; 0xb8 <main>
  9e:	0c 94 d5 06 	jmp	0xdaa	; 0xdaa <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <write_hash_eeprom>:

// sha-1 initial values, saves values in eeprom for keeping ram free, if they are not there already; eeprom_update_block for minimizing eeprom write cycles
const uint32_t sha1_initial_values[5] = {0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0};

void write_hash_eeprom(){
	eeprom_update_block(sha1_initial_values, EEPROM_HASH_ADRESS, sizeof(sha1_initial_values));
  a6:	44 e1       	ldi	r20, 0x14	; 20
  a8:	50 e0       	ldi	r21, 0x00	; 0
  aa:	60 e0       	ldi	r22, 0x00	; 0
  ac:	70 e0       	ldi	r23, 0x00	; 0
  ae:	8d e0       	ldi	r24, 0x0D	; 13
  b0:	91 e0       	ldi	r25, 0x01	; 1
  b2:	0e 94 b3 06 	call	0xd66	; 0xd66 <eeprom_update_block>
  b6:	08 95       	ret

000000b8 <main>:
}



int main(void)
{
  b8:	cf 93       	push	r28
  ba:	df 93       	push	r29
  bc:	cd b7       	in	r28, 0x3d	; 61
  be:	de b7       	in	r29, 0x3e	; 62
  c0:	c0 57       	subi	r28, 0x70	; 112
  c2:	d1 09       	sbc	r29, r1
  c4:	0f b6       	in	r0, 0x3f	; 63
  c6:	f8 94       	cli
  c8:	de bf       	out	0x3e, r29	; 62
  ca:	0f be       	out	0x3f, r0	; 63
  cc:	cd bf       	out	0x3d, r28	; 61
	write_hash_eeprom();
  ce:	0e 94 53 00 	call	0xa6	; 0xa6 <write_hash_eeprom>
	usart_init(9600);
  d2:	80 e8       	ldi	r24, 0x80	; 128
  d4:	95 e2       	ldi	r25, 0x25	; 37
  d6:	0e 94 af 05 	call	0xb5e	; 0xb5e <usart_init>
	//UART_init();
	DDRB |= (1 << PB5);  // Setze PB0 als Ausgang (LED-Pin)
  da:	84 b1       	in	r24, 0x04	; 4
  dc:	80 62       	ori	r24, 0x20	; 32
  de:	84 b9       	out	0x04, r24	; 4
				    

	
    while (1) {
		
		if(gotcalled){
  e0:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <__data_end>
  e4:	88 23       	and	r24, r24
  e6:	21 f0       	breq	.+8      	; 0xf0 <main+0x38>
			gotcalled = 0;
  e8:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <__data_end>
			save();
  ec:	0e 94 20 06 	call	0xc40	; 0xc40 <save>
			//uart_sendByte(rxBuffer[rxBufPos-1]);
			//uart_sendArray(rxBuffer, rxBufPos);
		}
		if(startFlag){
  f0:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <startFlag>
  f4:	88 23       	and	r24, r24
  f6:	39 f1       	breq	.+78     	; 0x146 <main+0x8e>
			cli();
  f8:	f8 94       	cli
			startFlag=0;
  fa:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <startFlag>
			uart_sendString(message);
  fe:	82 e0       	ldi	r24, 0x02	; 2
 100:	91 e0       	ldi	r25, 0x01	; 1
 102:	0e 94 de 05 	call	0xbbc	; 0xbbc <uart_sendString>
			sha1_init(&ctx);
 106:	ce 01       	movw	r24, r28
 108:	01 96       	adiw	r24, 0x01	; 1
 10a:	0e 94 17 04 	call	0x82e	; 0x82e <sha1_init>
			sha1_update(&ctx, message, 3);  // Length of "Hello, AVR!"
 10e:	23 e0       	ldi	r18, 0x03	; 3
 110:	30 e0       	ldi	r19, 0x00	; 0
 112:	40 e0       	ldi	r20, 0x00	; 0
 114:	50 e0       	ldi	r21, 0x00	; 0
 116:	62 e0       	ldi	r22, 0x02	; 2
 118:	71 e0       	ldi	r23, 0x01	; 1
 11a:	ce 01       	movw	r24, r28
 11c:	01 96       	adiw	r24, 0x01	; 1
 11e:	0e 94 41 04 	call	0x882	; 0x882 <sha1_update>
			sha1_final(&ctx, digest);
 122:	be 01       	movw	r22, r28
 124:	63 5a       	subi	r22, 0xA3	; 163
 126:	7f 4f       	sbci	r23, 0xFF	; 255
 128:	ce 01       	movw	r24, r28
 12a:	01 96       	adiw	r24, 0x01	; 1
 12c:	0e 94 da 04 	call	0x9b4	; 0x9b4 <sha1_final>
			memset(rxBuffer, 0, RX_BUFFER_SIZE);
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	94 e0       	ldi	r25, 0x04	; 4
 134:	e2 e4       	ldi	r30, 0x42	; 66
 136:	f1 e0       	ldi	r31, 0x01	; 1
 138:	df 01       	movw	r26, r30
 13a:	9c 01       	movw	r18, r24
 13c:	1d 92       	st	X+, r1
 13e:	21 50       	subi	r18, 0x01	; 1
 140:	30 40       	sbci	r19, 0x00	; 0
 142:	e1 f7       	brne	.-8      	; 0x13c <main+0x84>
			sei();
 144:	78 94       	sei
		}
		
		if(answearFlag){
 146:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <answearFlag>
 14a:	88 23       	and	r24, r24
 14c:	49 f2       	breq	.-110    	; 0xe0 <main+0x28>
			answearFlag = 0;
 14e:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <answearFlag>
			    uart_sendString("SHA1: ");
 152:	86 e0       	ldi	r24, 0x06	; 6
 154:	91 e0       	ldi	r25, 0x01	; 1
 156:	0e 94 de 05 	call	0xbbc	; 0xbbc <uart_sendString>
			    for (uint8_t i = 0; i < 20; i++) {
 15a:	10 e0       	ldi	r17, 0x00	; 0
 15c:	0d c0       	rjmp	.+26     	; 0x178 <main+0xc0>
				    uart_transmit_hex(digest[i]);
 15e:	ed e5       	ldi	r30, 0x5D	; 93
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	ec 0f       	add	r30, r28
 164:	fd 1f       	adc	r31, r29
 166:	e1 0f       	add	r30, r17
 168:	f1 1d       	adc	r31, r1
 16a:	80 81       	ld	r24, Z
 16c:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <uart_transmit_hex>
					uart_sendByte(' ');
 170:	80 e2       	ldi	r24, 0x20	; 32
 172:	0e 94 d7 05 	call	0xbae	; 0xbae <uart_sendByte>
		}
		
		if(answearFlag){
			answearFlag = 0;
			    uart_sendString("SHA1: ");
			    for (uint8_t i = 0; i < 20; i++) {
 176:	1f 5f       	subi	r17, 0xFF	; 255
 178:	14 31       	cpi	r17, 0x14	; 20
 17a:	88 f3       	brcs	.-30     	; 0x15e <main+0xa6>
				    uart_transmit_hex(digest[i]);
					uart_sendByte(' ');
					//uart_sendByte('\n');
			    }
			    uart_sendByte('\n');
 17c:	8a e0       	ldi	r24, 0x0A	; 10
 17e:	0e 94 d7 05 	call	0xbae	; 0xbae <uart_sendByte>
			PORTB ^= ( 1 << PB5 );
 182:	95 b1       	in	r25, 0x05	; 5
 184:	80 e2       	ldi	r24, 0x20	; 32
 186:	89 27       	eor	r24, r25
 188:	85 b9       	out	0x05, r24	; 5
 18a:	aa cf       	rjmp	.-172    	; 0xe0 <main+0x28>

0000018c <sha1_transform>:
#include "sha1.h"
#include <string.h>

#define ROTL(x, n) ((x << n) | (x >> (32 - n)))

void sha1_transform(SHA1_CTX *context, const uint8_t data[]) {
 18c:	2f 92       	push	r2
 18e:	3f 92       	push	r3
 190:	4f 92       	push	r4
 192:	5f 92       	push	r5
 194:	6f 92       	push	r6
 196:	7f 92       	push	r7
 198:	8f 92       	push	r8
 19a:	9f 92       	push	r9
 19c:	af 92       	push	r10
 19e:	bf 92       	push	r11
 1a0:	cf 92       	push	r12
 1a2:	df 92       	push	r13
 1a4:	ef 92       	push	r14
 1a6:	ff 92       	push	r15
 1a8:	0f 93       	push	r16
 1aa:	1f 93       	push	r17
 1ac:	cf 93       	push	r28
 1ae:	df 93       	push	r29
 1b0:	cd b7       	in	r28, 0x3d	; 61
 1b2:	de b7       	in	r29, 0x3e	; 62
 1b4:	c4 56       	subi	r28, 0x64	; 100
 1b6:	d1 40       	sbci	r29, 0x01	; 1
 1b8:	0f b6       	in	r0, 0x3f	; 63
 1ba:	f8 94       	cli
 1bc:	de bf       	out	0x3e, r29	; 62
 1be:	0f be       	out	0x3f, r0	; 63
 1c0:	cd bf       	out	0x3d, r28	; 61
 1c2:	1c 01       	movw	r2, r24
	uint32_t a, b, c, d, e, i, j, t, w[80];

	// Copy the block into W[0..15]
	for (i = 0; i < 16; i++) {
 1c4:	c1 2c       	mov	r12, r1
 1c6:	d1 2c       	mov	r13, r1
 1c8:	76 01       	movw	r14, r12
 1ca:	32 c0       	rjmp	.+100    	; 0x230 <sha1_transform+0xa4>
		w[i] = (data[i * 4] << 24) | (data[i * 4 + 1] << 16) |
 1cc:	f6 01       	movw	r30, r12
 1ce:	ee 0f       	add	r30, r30
 1d0:	ff 1f       	adc	r31, r31
 1d2:	ee 0f       	add	r30, r30
 1d4:	ff 1f       	adc	r31, r31
 1d6:	e6 0f       	add	r30, r22
 1d8:	f7 1f       	adc	r31, r23
 1da:	80 81       	ld	r24, Z
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	55 27       	eor	r21, r21
 1e0:	44 27       	eor	r20, r20
 1e2:	21 81       	ldd	r18, Z+1	; 0x01
 1e4:	30 e0       	ldi	r19, 0x00	; 0
 1e6:	99 27       	eor	r25, r25
 1e8:	88 27       	eor	r24, r24
 1ea:	84 2b       	or	r24, r20
 1ec:	95 2b       	or	r25, r21
		(data[i * 4 + 2] << 8) | (data[i * 4 + 3]);
 1ee:	22 81       	ldd	r18, Z+2	; 0x02
 1f0:	30 e0       	ldi	r19, 0x00	; 0
 1f2:	32 2f       	mov	r19, r18
 1f4:	22 27       	eor	r18, r18
void sha1_transform(SHA1_CTX *context, const uint8_t data[]) {
	uint32_t a, b, c, d, e, i, j, t, w[80];

	// Copy the block into W[0..15]
	for (i = 0; i < 16; i++) {
		w[i] = (data[i * 4] << 24) | (data[i * 4 + 1] << 16) |
 1f6:	82 2b       	or	r24, r18
 1f8:	93 2b       	or	r25, r19
		(data[i * 4 + 2] << 8) | (data[i * 4 + 3]);
 1fa:	23 81       	ldd	r18, Z+3	; 0x03
 1fc:	82 2b       	or	r24, r18
void sha1_transform(SHA1_CTX *context, const uint8_t data[]) {
	uint32_t a, b, c, d, e, i, j, t, w[80];

	// Copy the block into W[0..15]
	for (i = 0; i < 16; i++) {
		w[i] = (data[i * 4] << 24) | (data[i * 4 + 1] << 16) |
 1fe:	f6 01       	movw	r30, r12
 200:	ee 0f       	add	r30, r30
 202:	ff 1f       	adc	r31, r31
 204:	ee 0f       	add	r30, r30
 206:	ff 1f       	adc	r31, r31
 208:	44 24       	eor	r4, r4
 20a:	43 94       	inc	r4
 20c:	51 2c       	mov	r5, r1
 20e:	4c 0e       	add	r4, r28
 210:	5d 1e       	adc	r5, r29
 212:	e4 0d       	add	r30, r4
 214:	f5 1d       	adc	r31, r5
 216:	09 2e       	mov	r0, r25
 218:	00 0c       	add	r0, r0
 21a:	aa 0b       	sbc	r26, r26
 21c:	bb 0b       	sbc	r27, r27
 21e:	80 83       	st	Z, r24
 220:	91 83       	std	Z+1, r25	; 0x01
 222:	a2 83       	std	Z+2, r26	; 0x02
 224:	b3 83       	std	Z+3, r27	; 0x03

void sha1_transform(SHA1_CTX *context, const uint8_t data[]) {
	uint32_t a, b, c, d, e, i, j, t, w[80];

	// Copy the block into W[0..15]
	for (i = 0; i < 16; i++) {
 226:	2f ef       	ldi	r18, 0xFF	; 255
 228:	c2 1a       	sub	r12, r18
 22a:	d2 0a       	sbc	r13, r18
 22c:	e2 0a       	sbc	r14, r18
 22e:	f2 0a       	sbc	r15, r18
 230:	30 e1       	ldi	r19, 0x10	; 16
 232:	c3 16       	cp	r12, r19
 234:	d1 04       	cpc	r13, r1
 236:	e1 04       	cpc	r14, r1
 238:	f1 04       	cpc	r15, r1
 23a:	40 f2       	brcs	.-112    	; 0x1cc <sha1_transform+0x40>
 23c:	c1 2c       	mov	r12, r1
 23e:	d1 2c       	mov	r13, r1
 240:	76 01       	movw	r14, r12
 242:	68 94       	set
 244:	c4 f8       	bld	r12, 4
 246:	87 c0       	rjmp	.+270    	; 0x356 <sha1_transform+0x1ca>
		(data[i * 4 + 2] << 8) | (data[i * 4 + 3]);
	}

	// Extend the 16 words into 80 words
	for (i = 16; i < 80; i++) {
		w[i] = ROTL(w[i - 3] ^ w[i - 8] ^ w[i - 14] ^ w[i - 16], 1);
 248:	d7 01       	movw	r26, r14
 24a:	c6 01       	movw	r24, r12
 24c:	03 97       	sbiw	r24, 0x03	; 3
 24e:	a1 09       	sbc	r26, r1
 250:	b1 09       	sbc	r27, r1
 252:	88 0f       	add	r24, r24
 254:	99 1f       	adc	r25, r25
 256:	88 0f       	add	r24, r24
 258:	99 1f       	adc	r25, r25
 25a:	e1 e0       	ldi	r30, 0x01	; 1
 25c:	f0 e0       	ldi	r31, 0x00	; 0
 25e:	ec 0f       	add	r30, r28
 260:	fd 1f       	adc	r31, r29
 262:	e8 0f       	add	r30, r24
 264:	f9 1f       	adc	r31, r25
 266:	00 81       	ld	r16, Z
 268:	11 81       	ldd	r17, Z+1	; 0x01
 26a:	22 81       	ldd	r18, Z+2	; 0x02
 26c:	33 81       	ldd	r19, Z+3	; 0x03
 26e:	b7 01       	movw	r22, r14
 270:	a6 01       	movw	r20, r12
 272:	48 50       	subi	r20, 0x08	; 8
 274:	51 09       	sbc	r21, r1
 276:	61 09       	sbc	r22, r1
 278:	71 09       	sbc	r23, r1
 27a:	44 0f       	add	r20, r20
 27c:	55 1f       	adc	r21, r21
 27e:	44 0f       	add	r20, r20
 280:	55 1f       	adc	r21, r21
 282:	e1 e0       	ldi	r30, 0x01	; 1
 284:	f0 e0       	ldi	r31, 0x00	; 0
 286:	ec 0f       	add	r30, r28
 288:	fd 1f       	adc	r31, r29
 28a:	e4 0f       	add	r30, r20
 28c:	f5 1f       	adc	r31, r21
 28e:	80 81       	ld	r24, Z
 290:	91 81       	ldd	r25, Z+1	; 0x01
 292:	a2 81       	ldd	r26, Z+2	; 0x02
 294:	b3 81       	ldd	r27, Z+3	; 0x03
 296:	80 27       	eor	r24, r16
 298:	91 27       	eor	r25, r17
 29a:	a2 27       	eor	r26, r18
 29c:	b3 27       	eor	r27, r19
 29e:	b7 01       	movw	r22, r14
 2a0:	a6 01       	movw	r20, r12
 2a2:	4e 50       	subi	r20, 0x0E	; 14
 2a4:	51 09       	sbc	r21, r1
 2a6:	61 09       	sbc	r22, r1
 2a8:	71 09       	sbc	r23, r1
 2aa:	44 0f       	add	r20, r20
 2ac:	55 1f       	adc	r21, r21
 2ae:	44 0f       	add	r20, r20
 2b0:	55 1f       	adc	r21, r21
 2b2:	e1 e0       	ldi	r30, 0x01	; 1
 2b4:	f0 e0       	ldi	r31, 0x00	; 0
 2b6:	ec 0f       	add	r30, r28
 2b8:	fd 1f       	adc	r31, r29
 2ba:	e4 0f       	add	r30, r20
 2bc:	f5 1f       	adc	r31, r21
 2be:	00 81       	ld	r16, Z
 2c0:	11 81       	ldd	r17, Z+1	; 0x01
 2c2:	22 81       	ldd	r18, Z+2	; 0x02
 2c4:	33 81       	ldd	r19, Z+3	; 0x03
 2c6:	08 27       	eor	r16, r24
 2c8:	19 27       	eor	r17, r25
 2ca:	2a 27       	eor	r18, r26
 2cc:	3b 27       	eor	r19, r27
 2ce:	b7 01       	movw	r22, r14
 2d0:	a6 01       	movw	r20, r12
 2d2:	40 51       	subi	r20, 0x10	; 16
 2d4:	51 09       	sbc	r21, r1
 2d6:	61 09       	sbc	r22, r1
 2d8:	71 09       	sbc	r23, r1
 2da:	44 0f       	add	r20, r20
 2dc:	55 1f       	adc	r21, r21
 2de:	44 0f       	add	r20, r20
 2e0:	55 1f       	adc	r21, r21
 2e2:	e1 e0       	ldi	r30, 0x01	; 1
 2e4:	f0 e0       	ldi	r31, 0x00	; 0
 2e6:	ec 0f       	add	r30, r28
 2e8:	fd 1f       	adc	r31, r29
 2ea:	e4 0f       	add	r30, r20
 2ec:	f5 1f       	adc	r31, r21
 2ee:	80 81       	ld	r24, Z
 2f0:	91 81       	ldd	r25, Z+1	; 0x01
 2f2:	a2 81       	ldd	r26, Z+2	; 0x02
 2f4:	b3 81       	ldd	r27, Z+3	; 0x03
 2f6:	4c 01       	movw	r8, r24
 2f8:	5d 01       	movw	r10, r26
 2fa:	88 0c       	add	r8, r8
 2fc:	99 1c       	adc	r9, r9
 2fe:	aa 1c       	adc	r10, r10
 300:	bb 1c       	adc	r11, r11
 302:	80 26       	eor	r8, r16
 304:	91 26       	eor	r9, r17
 306:	a2 26       	eor	r10, r18
 308:	b3 26       	eor	r11, r19
 30a:	ac 01       	movw	r20, r24
 30c:	bd 01       	movw	r22, r26
 30e:	44 27       	eor	r20, r20
 310:	77 fd       	sbrc	r23, 7
 312:	43 95       	inc	r20
 314:	55 27       	eor	r21, r21
 316:	66 27       	eor	r22, r22
 318:	77 27       	eor	r23, r23
 31a:	d9 01       	movw	r26, r18
 31c:	c8 01       	movw	r24, r16
 31e:	84 27       	eor	r24, r20
 320:	95 27       	eor	r25, r21
 322:	a6 27       	eor	r26, r22
 324:	b7 27       	eor	r27, r23
 326:	88 29       	or	r24, r8
 328:	99 29       	or	r25, r9
 32a:	aa 29       	or	r26, r10
 32c:	bb 29       	or	r27, r11
 32e:	f6 01       	movw	r30, r12
 330:	ee 0f       	add	r30, r30
 332:	ff 1f       	adc	r31, r31
 334:	ee 0f       	add	r30, r30
 336:	ff 1f       	adc	r31, r31
 338:	41 e0       	ldi	r20, 0x01	; 1
 33a:	50 e0       	ldi	r21, 0x00	; 0
 33c:	4c 0f       	add	r20, r28
 33e:	5d 1f       	adc	r21, r29
 340:	e4 0f       	add	r30, r20
 342:	f5 1f       	adc	r31, r21
 344:	80 83       	st	Z, r24
 346:	91 83       	std	Z+1, r25	; 0x01
 348:	a2 83       	std	Z+2, r26	; 0x02
 34a:	b3 83       	std	Z+3, r27	; 0x03
		w[i] = (data[i * 4] << 24) | (data[i * 4 + 1] << 16) |
		(data[i * 4 + 2] << 8) | (data[i * 4 + 3]);
	}

	// Extend the 16 words into 80 words
	for (i = 16; i < 80; i++) {
 34c:	5f ef       	ldi	r21, 0xFF	; 255
 34e:	c5 1a       	sub	r12, r21
 350:	d5 0a       	sbc	r13, r21
 352:	e5 0a       	sbc	r14, r21
 354:	f5 0a       	sbc	r15, r21
 356:	60 e5       	ldi	r22, 0x50	; 80
 358:	c6 16       	cp	r12, r22
 35a:	d1 04       	cpc	r13, r1
 35c:	e1 04       	cpc	r14, r1
 35e:	f1 04       	cpc	r15, r1
 360:	08 f4       	brcc	.+2      	; 0x364 <sha1_transform+0x1d8>
 362:	72 cf       	rjmp	.-284    	; 0x248 <sha1_transform+0xbc>
		w[i] = ROTL(w[i - 3] ^ w[i - 8] ^ w[i - 14] ^ w[i - 16], 1);
	}

	// Initialize working variables
	a = context->state[0];
 364:	d1 01       	movw	r26, r2
 366:	8d 91       	ld	r24, X+
 368:	9d 91       	ld	r25, X+
 36a:	0d 90       	ld	r0, X+
 36c:	bc 91       	ld	r27, X
 36e:	a0 2d       	mov	r26, r0
 370:	c3 5b       	subi	r28, 0xB3	; 179
 372:	de 4f       	sbci	r29, 0xFE	; 254
 374:	88 83       	st	Y, r24
 376:	99 83       	std	Y+1, r25	; 0x01
 378:	aa 83       	std	Y+2, r26	; 0x02
 37a:	bb 83       	std	Y+3, r27	; 0x03
 37c:	cd 54       	subi	r28, 0x4D	; 77
 37e:	d1 40       	sbci	r29, 0x01	; 1
	b = context->state[1];
 380:	d1 01       	movw	r26, r2
 382:	14 96       	adiw	r26, 0x04	; 4
 384:	4d 90       	ld	r4, X+
 386:	5d 90       	ld	r5, X+
 388:	6d 90       	ld	r6, X+
 38a:	7c 90       	ld	r7, X
 38c:	17 97       	sbiw	r26, 0x07	; 7
 38e:	cf 5a       	subi	r28, 0xAF	; 175
 390:	de 4f       	sbci	r29, 0xFE	; 254
 392:	48 82       	st	Y, r4
 394:	59 82       	std	Y+1, r5	; 0x01
 396:	6a 82       	std	Y+2, r6	; 0x02
 398:	7b 82       	std	Y+3, r7	; 0x03
 39a:	c1 55       	subi	r28, 0x51	; 81
 39c:	d1 40       	sbci	r29, 0x01	; 1
	c = context->state[2];
 39e:	18 96       	adiw	r26, 0x08	; 8
 3a0:	4d 90       	ld	r4, X+
 3a2:	5d 90       	ld	r5, X+
 3a4:	6d 90       	ld	r6, X+
 3a6:	7c 90       	ld	r7, X
 3a8:	1b 97       	sbiw	r26, 0x0b	; 11
 3aa:	cb 5a       	subi	r28, 0xAB	; 171
 3ac:	de 4f       	sbci	r29, 0xFE	; 254
 3ae:	48 82       	st	Y, r4
 3b0:	59 82       	std	Y+1, r5	; 0x01
 3b2:	6a 82       	std	Y+2, r6	; 0x02
 3b4:	7b 82       	std	Y+3, r7	; 0x03
 3b6:	c5 55       	subi	r28, 0x55	; 85
 3b8:	d1 40       	sbci	r29, 0x01	; 1
	d = context->state[3];
 3ba:	1c 96       	adiw	r26, 0x0c	; 12
 3bc:	4d 90       	ld	r4, X+
 3be:	5d 90       	ld	r5, X+
 3c0:	6d 90       	ld	r6, X+
 3c2:	7c 90       	ld	r7, X
 3c4:	1f 97       	sbiw	r26, 0x0f	; 15
 3c6:	c7 5a       	subi	r28, 0xA7	; 167
 3c8:	de 4f       	sbci	r29, 0xFE	; 254
 3ca:	48 82       	st	Y, r4
 3cc:	59 82       	std	Y+1, r5	; 0x01
 3ce:	6a 82       	std	Y+2, r6	; 0x02
 3d0:	7b 82       	std	Y+3, r7	; 0x03
 3d2:	c9 55       	subi	r28, 0x59	; 89
 3d4:	d1 40       	sbci	r29, 0x01	; 1
	e = context->state[4];
 3d6:	50 96       	adiw	r26, 0x10	; 16
 3d8:	4d 90       	ld	r4, X+
 3da:	5d 90       	ld	r5, X+
 3dc:	6d 90       	ld	r6, X+
 3de:	7c 90       	ld	r7, X
 3e0:	53 97       	sbiw	r26, 0x13	; 19
 3e2:	c3 5a       	subi	r28, 0xA3	; 163
 3e4:	de 4f       	sbci	r29, 0xFE	; 254
 3e6:	48 82       	st	Y, r4
 3e8:	59 82       	std	Y+1, r5	; 0x01
 3ea:	6a 82       	std	Y+2, r6	; 0x02
 3ec:	7b 82       	std	Y+3, r7	; 0x03
 3ee:	cd 55       	subi	r28, 0x5D	; 93
 3f0:	d1 40       	sbci	r29, 0x01	; 1
 3f2:	c7 5b       	subi	r28, 0xB7	; 183
 3f4:	de 4f       	sbci	r29, 0xFE	; 254
 3f6:	48 82       	st	Y, r4
 3f8:	59 82       	std	Y+1, r5	; 0x01
 3fa:	6a 82       	std	Y+2, r6	; 0x02
 3fc:	7b 82       	std	Y+3, r7	; 0x03
 3fe:	c9 54       	subi	r28, 0x49	; 73
 400:	d1 40       	sbci	r29, 0x01	; 1

	// Initialize working variables
	a = context->state[0];
	b = context->state[1];
	c = context->state[2];
	d = context->state[3];
 402:	c7 5a       	subi	r28, 0xA7	; 167
 404:	de 4f       	sbci	r29, 0xFE	; 254
 406:	48 80       	ld	r4, Y
 408:	59 80       	ldd	r5, Y+1	; 0x01
 40a:	6a 80       	ldd	r6, Y+2	; 0x02
 40c:	7b 80       	ldd	r7, Y+3	; 0x03
 40e:	c9 55       	subi	r28, 0x59	; 89
 410:	d1 40       	sbci	r29, 0x01	; 1
 412:	cf 5b       	subi	r28, 0xBF	; 191
 414:	de 4f       	sbci	r29, 0xFE	; 254
 416:	48 82       	st	Y, r4
 418:	59 82       	std	Y+1, r5	; 0x01
 41a:	6a 82       	std	Y+2, r6	; 0x02
 41c:	7b 82       	std	Y+3, r7	; 0x03
 41e:	c1 54       	subi	r28, 0x41	; 65
 420:	d1 40       	sbci	r29, 0x01	; 1
	}

	// Initialize working variables
	a = context->state[0];
	b = context->state[1];
	c = context->state[2];
 422:	cb 5a       	subi	r28, 0xAB	; 171
 424:	de 4f       	sbci	r29, 0xFE	; 254
 426:	28 81       	ld	r18, Y
 428:	39 81       	ldd	r19, Y+1	; 0x01
 42a:	4a 81       	ldd	r20, Y+2	; 0x02
 42c:	5b 81       	ldd	r21, Y+3	; 0x03
 42e:	c5 55       	subi	r28, 0x55	; 85
 430:	d1 40       	sbci	r29, 0x01	; 1
 432:	cb 5b       	subi	r28, 0xBB	; 187
 434:	de 4f       	sbci	r29, 0xFE	; 254
 436:	28 83       	st	Y, r18
 438:	39 83       	std	Y+1, r19	; 0x01
 43a:	4a 83       	std	Y+2, r20	; 0x02
 43c:	5b 83       	std	Y+3, r21	; 0x03
 43e:	c5 54       	subi	r28, 0x45	; 69
 440:	d1 40       	sbci	r29, 0x01	; 1
		w[i] = ROTL(w[i - 3] ^ w[i - 8] ^ w[i - 14] ^ w[i - 16], 1);
	}

	// Initialize working variables
	a = context->state[0];
	b = context->state[1];
 442:	cf 5a       	subi	r28, 0xAF	; 175
 444:	de 4f       	sbci	r29, 0xFE	; 254
 446:	c8 80       	ld	r12, Y
 448:	d9 80       	ldd	r13, Y+1	; 0x01
 44a:	ea 80       	ldd	r14, Y+2	; 0x02
 44c:	fb 80       	ldd	r15, Y+3	; 0x03
 44e:	c1 55       	subi	r28, 0x51	; 81
 450:	d1 40       	sbci	r29, 0x01	; 1
	for (i = 16; i < 80; i++) {
		w[i] = ROTL(w[i - 3] ^ w[i - 8] ^ w[i - 14] ^ w[i - 16], 1);
	}

	// Initialize working variables
	a = context->state[0];
 452:	c3 5b       	subi	r28, 0xB3	; 179
 454:	de 4f       	sbci	r29, 0xFE	; 254
 456:	88 80       	ld	r8, Y
 458:	99 80       	ldd	r9, Y+1	; 0x01
 45a:	aa 80       	ldd	r10, Y+2	; 0x02
 45c:	bb 80       	ldd	r11, Y+3	; 0x03
 45e:	cd 54       	subi	r28, 0x4D	; 77
 460:	d1 40       	sbci	r29, 0x01	; 1
	c = context->state[2];
	d = context->state[3];
	e = context->state[4];

	// Main loop
	for (i = 0; i < 80; i++) {
 462:	00 e0       	ldi	r16, 0x00	; 0
 464:	10 e0       	ldi	r17, 0x00	; 0
 466:	98 01       	movw	r18, r16
 468:	55 c1       	rjmp	.+682    	; 0x714 <__EEPROM_REGION_LENGTH__+0x314>
		if (i < 20)
 46a:	04 31       	cpi	r16, 0x14	; 20
 46c:	11 05       	cpc	r17, r1
 46e:	21 05       	cpc	r18, r1
 470:	31 05       	cpc	r19, r1
 472:	58 f5       	brcc	.+86     	; 0x4ca <__EEPROM_REGION_LENGTH__+0xca>
		t = ((b & c) | (~b & d)) + 0x5A827999;
 474:	cb 5b       	subi	r28, 0xBB	; 187
 476:	de 4f       	sbci	r29, 0xFE	; 254
 478:	88 81       	ld	r24, Y
 47a:	99 81       	ldd	r25, Y+1	; 0x01
 47c:	aa 81       	ldd	r26, Y+2	; 0x02
 47e:	bb 81       	ldd	r27, Y+3	; 0x03
 480:	c5 54       	subi	r28, 0x45	; 69
 482:	d1 40       	sbci	r29, 0x01	; 1
 484:	cf 5b       	subi	r28, 0xBF	; 191
 486:	de 4f       	sbci	r29, 0xFE	; 254
 488:	48 81       	ld	r20, Y
 48a:	59 81       	ldd	r21, Y+1	; 0x01
 48c:	6a 81       	ldd	r22, Y+2	; 0x02
 48e:	7b 81       	ldd	r23, Y+3	; 0x03
 490:	c1 54       	subi	r28, 0x41	; 65
 492:	d1 40       	sbci	r29, 0x01	; 1
 494:	84 27       	eor	r24, r20
 496:	95 27       	eor	r25, r21
 498:	a6 27       	eor	r26, r22
 49a:	b7 27       	eor	r27, r23
 49c:	8c 21       	and	r24, r12
 49e:	9d 21       	and	r25, r13
 4a0:	ae 21       	and	r26, r14
 4a2:	bf 21       	and	r27, r15
 4a4:	84 27       	eor	r24, r20
 4a6:	95 27       	eor	r25, r21
 4a8:	a6 27       	eor	r26, r22
 4aa:	b7 27       	eor	r27, r23
 4ac:	ac 01       	movw	r20, r24
 4ae:	bd 01       	movw	r22, r26
 4b0:	47 56       	subi	r20, 0x67	; 103
 4b2:	56 48       	sbci	r21, 0x86	; 134
 4b4:	6d 47       	sbci	r22, 0x7D	; 125
 4b6:	75 4a       	sbci	r23, 0xA5	; 165
 4b8:	cf 59       	subi	r28, 0x9F	; 159
 4ba:	de 4f       	sbci	r29, 0xFE	; 254
 4bc:	48 83       	st	Y, r20
 4be:	59 83       	std	Y+1, r21	; 0x01
 4c0:	6a 83       	std	Y+2, r22	; 0x02
 4c2:	7b 83       	std	Y+3, r23	; 0x03
 4c4:	c1 56       	subi	r28, 0x61	; 97
 4c6:	d1 40       	sbci	r29, 0x01	; 1
 4c8:	8e c0       	rjmp	.+284    	; 0x5e6 <__EEPROM_REGION_LENGTH__+0x1e6>
		else if (i < 40)
 4ca:	08 32       	cpi	r16, 0x28	; 40
 4cc:	11 05       	cpc	r17, r1
 4ce:	21 05       	cpc	r18, r1
 4d0:	31 05       	cpc	r19, r1
 4d2:	38 f5       	brcc	.+78     	; 0x522 <__EEPROM_REGION_LENGTH__+0x122>
		t = (b ^ c ^ d) + 0x6ED9EBA1;
 4d4:	cb 5b       	subi	r28, 0xBB	; 187
 4d6:	de 4f       	sbci	r29, 0xFE	; 254
 4d8:	88 81       	ld	r24, Y
 4da:	99 81       	ldd	r25, Y+1	; 0x01
 4dc:	aa 81       	ldd	r26, Y+2	; 0x02
 4de:	bb 81       	ldd	r27, Y+3	; 0x03
 4e0:	c5 54       	subi	r28, 0x45	; 69
 4e2:	d1 40       	sbci	r29, 0x01	; 1
 4e4:	8c 25       	eor	r24, r12
 4e6:	9d 25       	eor	r25, r13
 4e8:	ae 25       	eor	r26, r14
 4ea:	bf 25       	eor	r27, r15
 4ec:	cf 5b       	subi	r28, 0xBF	; 191
 4ee:	de 4f       	sbci	r29, 0xFE	; 254
 4f0:	48 80       	ld	r4, Y
 4f2:	59 80       	ldd	r5, Y+1	; 0x01
 4f4:	6a 80       	ldd	r6, Y+2	; 0x02
 4f6:	7b 80       	ldd	r7, Y+3	; 0x03
 4f8:	c1 54       	subi	r28, 0x41	; 65
 4fa:	d1 40       	sbci	r29, 0x01	; 1
 4fc:	84 25       	eor	r24, r4
 4fe:	95 25       	eor	r25, r5
 500:	a6 25       	eor	r26, r6
 502:	b7 25       	eor	r27, r7
 504:	ac 01       	movw	r20, r24
 506:	bd 01       	movw	r22, r26
 508:	4f 55       	subi	r20, 0x5F	; 95
 50a:	54 41       	sbci	r21, 0x14	; 20
 50c:	66 42       	sbci	r22, 0x26	; 38
 50e:	71 49       	sbci	r23, 0x91	; 145
 510:	cf 59       	subi	r28, 0x9F	; 159
 512:	de 4f       	sbci	r29, 0xFE	; 254
 514:	48 83       	st	Y, r20
 516:	59 83       	std	Y+1, r21	; 0x01
 518:	6a 83       	std	Y+2, r22	; 0x02
 51a:	7b 83       	std	Y+3, r23	; 0x03
 51c:	c1 56       	subi	r28, 0x61	; 97
 51e:	d1 40       	sbci	r29, 0x01	; 1
 520:	62 c0       	rjmp	.+196    	; 0x5e6 <__EEPROM_REGION_LENGTH__+0x1e6>
		else if (i < 60)
 522:	0c 33       	cpi	r16, 0x3C	; 60
 524:	11 05       	cpc	r17, r1
 526:	21 05       	cpc	r18, r1
 528:	31 05       	cpc	r19, r1
 52a:	b8 f5       	brcc	.+110    	; 0x59a <__EEPROM_REGION_LENGTH__+0x19a>
		t = ((b & c) | (b & d) | (c & d)) + 0x8F1BBCDC;
 52c:	cb 5b       	subi	r28, 0xBB	; 187
 52e:	de 4f       	sbci	r29, 0xFE	; 254
 530:	88 81       	ld	r24, Y
 532:	99 81       	ldd	r25, Y+1	; 0x01
 534:	aa 81       	ldd	r26, Y+2	; 0x02
 536:	bb 81       	ldd	r27, Y+3	; 0x03
 538:	c5 54       	subi	r28, 0x45	; 69
 53a:	d1 40       	sbci	r29, 0x01	; 1
 53c:	cf 5b       	subi	r28, 0xBF	; 191
 53e:	de 4f       	sbci	r29, 0xFE	; 254
 540:	48 80       	ld	r4, Y
 542:	59 80       	ldd	r5, Y+1	; 0x01
 544:	6a 80       	ldd	r6, Y+2	; 0x02
 546:	7b 80       	ldd	r7, Y+3	; 0x03
 548:	c1 54       	subi	r28, 0x41	; 65
 54a:	d1 40       	sbci	r29, 0x01	; 1
 54c:	84 29       	or	r24, r4
 54e:	95 29       	or	r25, r5
 550:	a6 29       	or	r26, r6
 552:	b7 29       	or	r27, r7
 554:	8c 21       	and	r24, r12
 556:	9d 21       	and	r25, r13
 558:	ae 21       	and	r26, r14
 55a:	bf 21       	and	r27, r15
 55c:	cb 5b       	subi	r28, 0xBB	; 187
 55e:	de 4f       	sbci	r29, 0xFE	; 254
 560:	48 81       	ld	r20, Y
 562:	59 81       	ldd	r21, Y+1	; 0x01
 564:	6a 81       	ldd	r22, Y+2	; 0x02
 566:	7b 81       	ldd	r23, Y+3	; 0x03
 568:	c5 54       	subi	r28, 0x45	; 69
 56a:	d1 40       	sbci	r29, 0x01	; 1
 56c:	44 21       	and	r20, r4
 56e:	55 21       	and	r21, r5
 570:	66 21       	and	r22, r6
 572:	77 21       	and	r23, r7
 574:	84 2b       	or	r24, r20
 576:	95 2b       	or	r25, r21
 578:	a6 2b       	or	r26, r22
 57a:	b7 2b       	or	r27, r23
 57c:	ac 01       	movw	r20, r24
 57e:	bd 01       	movw	r22, r26
 580:	44 52       	subi	r20, 0x24	; 36
 582:	53 44       	sbci	r21, 0x43	; 67
 584:	64 4e       	sbci	r22, 0xE4	; 228
 586:	70 47       	sbci	r23, 0x70	; 112
 588:	cf 59       	subi	r28, 0x9F	; 159
 58a:	de 4f       	sbci	r29, 0xFE	; 254
 58c:	48 83       	st	Y, r20
 58e:	59 83       	std	Y+1, r21	; 0x01
 590:	6a 83       	std	Y+2, r22	; 0x02
 592:	7b 83       	std	Y+3, r23	; 0x03
 594:	c1 56       	subi	r28, 0x61	; 97
 596:	d1 40       	sbci	r29, 0x01	; 1
 598:	26 c0       	rjmp	.+76     	; 0x5e6 <__EEPROM_REGION_LENGTH__+0x1e6>
		else
		t = (b ^ c ^ d) + 0xCA62C1D6;
 59a:	cb 5b       	subi	r28, 0xBB	; 187
 59c:	de 4f       	sbci	r29, 0xFE	; 254
 59e:	88 81       	ld	r24, Y
 5a0:	99 81       	ldd	r25, Y+1	; 0x01
 5a2:	aa 81       	ldd	r26, Y+2	; 0x02
 5a4:	bb 81       	ldd	r27, Y+3	; 0x03
 5a6:	c5 54       	subi	r28, 0x45	; 69
 5a8:	d1 40       	sbci	r29, 0x01	; 1
 5aa:	8c 25       	eor	r24, r12
 5ac:	9d 25       	eor	r25, r13
 5ae:	ae 25       	eor	r26, r14
 5b0:	bf 25       	eor	r27, r15
 5b2:	cf 5b       	subi	r28, 0xBF	; 191
 5b4:	de 4f       	sbci	r29, 0xFE	; 254
 5b6:	48 80       	ld	r4, Y
 5b8:	59 80       	ldd	r5, Y+1	; 0x01
 5ba:	6a 80       	ldd	r6, Y+2	; 0x02
 5bc:	7b 80       	ldd	r7, Y+3	; 0x03
 5be:	c1 54       	subi	r28, 0x41	; 65
 5c0:	d1 40       	sbci	r29, 0x01	; 1
 5c2:	84 25       	eor	r24, r4
 5c4:	95 25       	eor	r25, r5
 5c6:	a6 25       	eor	r26, r6
 5c8:	b7 25       	eor	r27, r7
 5ca:	ac 01       	movw	r20, r24
 5cc:	bd 01       	movw	r22, r26
 5ce:	4a 52       	subi	r20, 0x2A	; 42
 5d0:	5e 43       	sbci	r21, 0x3E	; 62
 5d2:	6d 49       	sbci	r22, 0x9D	; 157
 5d4:	75 43       	sbci	r23, 0x35	; 53
 5d6:	cf 59       	subi	r28, 0x9F	; 159
 5d8:	de 4f       	sbci	r29, 0xFE	; 254
 5da:	48 83       	st	Y, r20
 5dc:	59 83       	std	Y+1, r21	; 0x01
 5de:	6a 83       	std	Y+2, r22	; 0x02
 5e0:	7b 83       	std	Y+3, r23	; 0x03
 5e2:	c1 56       	subi	r28, 0x61	; 97
 5e4:	d1 40       	sbci	r29, 0x01	; 1

		t += ROTL(a, 5) + e + w[i];
 5e6:	24 01       	movw	r4, r8
 5e8:	35 01       	movw	r6, r10
 5ea:	44 0c       	add	r4, r4
 5ec:	55 1c       	adc	r5, r5
 5ee:	66 1c       	adc	r6, r6
 5f0:	77 1c       	adc	r7, r7
 5f2:	44 0c       	add	r4, r4
 5f4:	55 1c       	adc	r5, r5
 5f6:	66 1c       	adc	r6, r6
 5f8:	77 1c       	adc	r7, r7
 5fa:	44 0c       	add	r4, r4
 5fc:	55 1c       	adc	r5, r5
 5fe:	66 1c       	adc	r6, r6
 600:	77 1c       	adc	r7, r7
 602:	44 0c       	add	r4, r4
 604:	55 1c       	adc	r5, r5
 606:	66 1c       	adc	r6, r6
 608:	77 1c       	adc	r7, r7
 60a:	44 0c       	add	r4, r4
 60c:	55 1c       	adc	r5, r5
 60e:	66 1c       	adc	r6, r6
 610:	77 1c       	adc	r7, r7
 612:	b5 01       	movw	r22, r10
 614:	a4 01       	movw	r20, r8
 616:	03 2e       	mov	r0, r19
 618:	3b e1       	ldi	r19, 0x1B	; 27
 61a:	76 95       	lsr	r23
 61c:	67 95       	ror	r22
 61e:	57 95       	ror	r21
 620:	47 95       	ror	r20
 622:	3a 95       	dec	r19
 624:	d1 f7       	brne	.-12     	; 0x61a <__EEPROM_REGION_LENGTH__+0x21a>
 626:	30 2d       	mov	r19, r0
 628:	44 29       	or	r20, r4
 62a:	55 29       	or	r21, r5
 62c:	66 29       	or	r22, r6
 62e:	77 29       	or	r23, r7
 630:	c7 5b       	subi	r28, 0xB7	; 183
 632:	de 4f       	sbci	r29, 0xFE	; 254
 634:	88 81       	ld	r24, Y
 636:	99 81       	ldd	r25, Y+1	; 0x01
 638:	aa 81       	ldd	r26, Y+2	; 0x02
 63a:	bb 81       	ldd	r27, Y+3	; 0x03
 63c:	c9 54       	subi	r28, 0x49	; 73
 63e:	d1 40       	sbci	r29, 0x01	; 1
 640:	48 0f       	add	r20, r24
 642:	59 1f       	adc	r21, r25
 644:	6a 1f       	adc	r22, r26
 646:	7b 1f       	adc	r23, r27
 648:	f8 01       	movw	r30, r16
 64a:	ee 0f       	add	r30, r30
 64c:	ff 1f       	adc	r31, r31
 64e:	ee 0f       	add	r30, r30
 650:	ff 1f       	adc	r31, r31
 652:	a1 e0       	ldi	r26, 0x01	; 1
 654:	b0 e0       	ldi	r27, 0x00	; 0
 656:	ac 0f       	add	r26, r28
 658:	bd 1f       	adc	r27, r29
 65a:	ea 0f       	add	r30, r26
 65c:	fb 1f       	adc	r31, r27
 65e:	40 80       	ld	r4, Z
 660:	51 80       	ldd	r5, Z+1	; 0x01
 662:	62 80       	ldd	r6, Z+2	; 0x02
 664:	73 80       	ldd	r7, Z+3	; 0x03
 666:	44 0d       	add	r20, r4
 668:	55 1d       	adc	r21, r5
 66a:	66 1d       	adc	r22, r6
 66c:	77 1d       	adc	r23, r7
		e = d;
		d = c;
		c = ROTL(b, 30);
 66e:	26 01       	movw	r4, r12
 670:	37 01       	movw	r6, r14
 672:	76 94       	lsr	r7
 674:	67 94       	ror	r6
 676:	57 94       	ror	r5
 678:	47 94       	ror	r4
 67a:	76 94       	lsr	r7
 67c:	67 94       	ror	r6
 67e:	57 94       	ror	r5
 680:	47 94       	ror	r4
 682:	0b 2e       	mov	r0, r27
 684:	be e1       	ldi	r27, 0x1E	; 30
 686:	cc 0c       	add	r12, r12
 688:	dd 1c       	adc	r13, r13
 68a:	ee 1c       	adc	r14, r14
 68c:	ff 1c       	adc	r15, r15
 68e:	ba 95       	dec	r27
 690:	d1 f7       	brne	.-12     	; 0x686 <__EEPROM_REGION_LENGTH__+0x286>
 692:	b0 2d       	mov	r27, r0
	c = context->state[2];
	d = context->state[3];
	e = context->state[4];

	// Main loop
	for (i = 0; i < 80; i++) {
 694:	0f 5f       	subi	r16, 0xFF	; 255
 696:	1f 4f       	sbci	r17, 0xFF	; 255
 698:	2f 4f       	sbci	r18, 0xFF	; 255
 69a:	3f 4f       	sbci	r19, 0xFF	; 255
		t = ((b & c) | (b & d) | (c & d)) + 0x8F1BBCDC;
		else
		t = (b ^ c ^ d) + 0xCA62C1D6;

		t += ROTL(a, 5) + e + w[i];
		e = d;
 69c:	cf 5b       	subi	r28, 0xBF	; 191
 69e:	de 4f       	sbci	r29, 0xFE	; 254
 6a0:	88 81       	ld	r24, Y
 6a2:	99 81       	ldd	r25, Y+1	; 0x01
 6a4:	aa 81       	ldd	r26, Y+2	; 0x02
 6a6:	bb 81       	ldd	r27, Y+3	; 0x03
 6a8:	c1 54       	subi	r28, 0x41	; 65
 6aa:	d1 40       	sbci	r29, 0x01	; 1
 6ac:	c7 5b       	subi	r28, 0xB7	; 183
 6ae:	de 4f       	sbci	r29, 0xFE	; 254
 6b0:	88 83       	st	Y, r24
 6b2:	99 83       	std	Y+1, r25	; 0x01
 6b4:	aa 83       	std	Y+2, r26	; 0x02
 6b6:	bb 83       	std	Y+3, r27	; 0x03
 6b8:	c9 54       	subi	r28, 0x49	; 73
 6ba:	d1 40       	sbci	r29, 0x01	; 1
		d = c;
 6bc:	cb 5b       	subi	r28, 0xBB	; 187
 6be:	de 4f       	sbci	r29, 0xFE	; 254
 6c0:	88 81       	ld	r24, Y
 6c2:	99 81       	ldd	r25, Y+1	; 0x01
 6c4:	aa 81       	ldd	r26, Y+2	; 0x02
 6c6:	bb 81       	ldd	r27, Y+3	; 0x03
 6c8:	c5 54       	subi	r28, 0x45	; 69
 6ca:	d1 40       	sbci	r29, 0x01	; 1
 6cc:	cf 5b       	subi	r28, 0xBF	; 191
 6ce:	de 4f       	sbci	r29, 0xFE	; 254
 6d0:	88 83       	st	Y, r24
 6d2:	99 83       	std	Y+1, r25	; 0x01
 6d4:	aa 83       	std	Y+2, r26	; 0x02
 6d6:	bb 83       	std	Y+3, r27	; 0x03
 6d8:	c1 54       	subi	r28, 0x41	; 65
 6da:	d1 40       	sbci	r29, 0x01	; 1
		c = ROTL(b, 30);
 6dc:	d7 01       	movw	r26, r14
 6de:	c6 01       	movw	r24, r12
 6e0:	84 29       	or	r24, r4
 6e2:	95 29       	or	r25, r5
 6e4:	a6 29       	or	r26, r6
 6e6:	b7 29       	or	r27, r7
 6e8:	cb 5b       	subi	r28, 0xBB	; 187
 6ea:	de 4f       	sbci	r29, 0xFE	; 254
 6ec:	88 83       	st	Y, r24
 6ee:	99 83       	std	Y+1, r25	; 0x01
 6f0:	aa 83       	std	Y+2, r26	; 0x02
 6f2:	bb 83       	std	Y+3, r27	; 0x03
 6f4:	c5 54       	subi	r28, 0x45	; 69
 6f6:	d1 40       	sbci	r29, 0x01	; 1
		b = a;
 6f8:	75 01       	movw	r14, r10
 6fa:	64 01       	movw	r12, r8
		a = t;
 6fc:	cf 59       	subi	r28, 0x9F	; 159
 6fe:	de 4f       	sbci	r29, 0xFE	; 254
 700:	88 80       	ld	r8, Y
 702:	99 80       	ldd	r9, Y+1	; 0x01
 704:	aa 80       	ldd	r10, Y+2	; 0x02
 706:	bb 80       	ldd	r11, Y+3	; 0x03
 708:	c1 56       	subi	r28, 0x61	; 97
 70a:	d1 40       	sbci	r29, 0x01	; 1
 70c:	84 0e       	add	r8, r20
 70e:	95 1e       	adc	r9, r21
 710:	a6 1e       	adc	r10, r22
 712:	b7 1e       	adc	r11, r23
	c = context->state[2];
	d = context->state[3];
	e = context->state[4];

	// Main loop
	for (i = 0; i < 80; i++) {
 714:	00 35       	cpi	r16, 0x50	; 80
 716:	11 05       	cpc	r17, r1
 718:	21 05       	cpc	r18, r1
 71a:	31 05       	cpc	r19, r1
 71c:	08 f4       	brcc	.+2      	; 0x720 <__EEPROM_REGION_LENGTH__+0x320>
 71e:	a5 ce       	rjmp	.-694    	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
		b = a;
		a = t;
	}

	// Add this chunk's hash to the result
	context->state[0] += a;
 720:	c3 5b       	subi	r28, 0xB3	; 179
 722:	de 4f       	sbci	r29, 0xFE	; 254
 724:	48 80       	ld	r4, Y
 726:	59 80       	ldd	r5, Y+1	; 0x01
 728:	6a 80       	ldd	r6, Y+2	; 0x02
 72a:	7b 80       	ldd	r7, Y+3	; 0x03
 72c:	cd 54       	subi	r28, 0x4D	; 77
 72e:	d1 40       	sbci	r29, 0x01	; 1
 730:	84 0c       	add	r8, r4
 732:	95 1c       	adc	r9, r5
 734:	a6 1c       	adc	r10, r6
 736:	b7 1c       	adc	r11, r7
 738:	d1 01       	movw	r26, r2
 73a:	8d 92       	st	X+, r8
 73c:	9d 92       	st	X+, r9
 73e:	ad 92       	st	X+, r10
 740:	bc 92       	st	X, r11
 742:	13 97       	sbiw	r26, 0x03	; 3
	context->state[1] += b;
 744:	cf 5a       	subi	r28, 0xAF	; 175
 746:	de 4f       	sbci	r29, 0xFE	; 254
 748:	48 80       	ld	r4, Y
 74a:	59 80       	ldd	r5, Y+1	; 0x01
 74c:	6a 80       	ldd	r6, Y+2	; 0x02
 74e:	7b 80       	ldd	r7, Y+3	; 0x03
 750:	c1 55       	subi	r28, 0x51	; 81
 752:	d1 40       	sbci	r29, 0x01	; 1
 754:	c4 0c       	add	r12, r4
 756:	d5 1c       	adc	r13, r5
 758:	e6 1c       	adc	r14, r6
 75a:	f7 1c       	adc	r15, r7
 75c:	14 96       	adiw	r26, 0x04	; 4
 75e:	cd 92       	st	X+, r12
 760:	dd 92       	st	X+, r13
 762:	ed 92       	st	X+, r14
 764:	fc 92       	st	X, r15
 766:	17 97       	sbiw	r26, 0x07	; 7
	context->state[2] += c;
 768:	cb 5b       	subi	r28, 0xBB	; 187
 76a:	de 4f       	sbci	r29, 0xFE	; 254
 76c:	88 81       	ld	r24, Y
 76e:	99 81       	ldd	r25, Y+1	; 0x01
 770:	aa 81       	ldd	r26, Y+2	; 0x02
 772:	bb 81       	ldd	r27, Y+3	; 0x03
 774:	c5 54       	subi	r28, 0x45	; 69
 776:	d1 40       	sbci	r29, 0x01	; 1
 778:	cb 5a       	subi	r28, 0xAB	; 171
 77a:	de 4f       	sbci	r29, 0xFE	; 254
 77c:	48 80       	ld	r4, Y
 77e:	59 80       	ldd	r5, Y+1	; 0x01
 780:	6a 80       	ldd	r6, Y+2	; 0x02
 782:	7b 80       	ldd	r7, Y+3	; 0x03
 784:	c5 55       	subi	r28, 0x55	; 85
 786:	d1 40       	sbci	r29, 0x01	; 1
 788:	84 0d       	add	r24, r4
 78a:	95 1d       	adc	r25, r5
 78c:	a6 1d       	adc	r26, r6
 78e:	b7 1d       	adc	r27, r7
 790:	f1 01       	movw	r30, r2
 792:	80 87       	std	Z+8, r24	; 0x08
 794:	91 87       	std	Z+9, r25	; 0x09
 796:	a2 87       	std	Z+10, r26	; 0x0a
 798:	b3 87       	std	Z+11, r27	; 0x0b
	context->state[3] += d;
 79a:	cf 5b       	subi	r28, 0xBF	; 191
 79c:	de 4f       	sbci	r29, 0xFE	; 254
 79e:	88 81       	ld	r24, Y
 7a0:	99 81       	ldd	r25, Y+1	; 0x01
 7a2:	aa 81       	ldd	r26, Y+2	; 0x02
 7a4:	bb 81       	ldd	r27, Y+3	; 0x03
 7a6:	c1 54       	subi	r28, 0x41	; 65
 7a8:	d1 40       	sbci	r29, 0x01	; 1
 7aa:	c7 5a       	subi	r28, 0xA7	; 167
 7ac:	de 4f       	sbci	r29, 0xFE	; 254
 7ae:	48 80       	ld	r4, Y
 7b0:	59 80       	ldd	r5, Y+1	; 0x01
 7b2:	6a 80       	ldd	r6, Y+2	; 0x02
 7b4:	7b 80       	ldd	r7, Y+3	; 0x03
 7b6:	c9 55       	subi	r28, 0x59	; 89
 7b8:	d1 40       	sbci	r29, 0x01	; 1
 7ba:	84 0d       	add	r24, r4
 7bc:	95 1d       	adc	r25, r5
 7be:	a6 1d       	adc	r26, r6
 7c0:	b7 1d       	adc	r27, r7
 7c2:	84 87       	std	Z+12, r24	; 0x0c
 7c4:	95 87       	std	Z+13, r25	; 0x0d
 7c6:	a6 87       	std	Z+14, r26	; 0x0e
 7c8:	b7 87       	std	Z+15, r27	; 0x0f
	context->state[4] += e;
 7ca:	c7 5b       	subi	r28, 0xB7	; 183
 7cc:	de 4f       	sbci	r29, 0xFE	; 254
 7ce:	88 81       	ld	r24, Y
 7d0:	99 81       	ldd	r25, Y+1	; 0x01
 7d2:	aa 81       	ldd	r26, Y+2	; 0x02
 7d4:	bb 81       	ldd	r27, Y+3	; 0x03
 7d6:	c9 54       	subi	r28, 0x49	; 73
 7d8:	d1 40       	sbci	r29, 0x01	; 1
 7da:	c3 5a       	subi	r28, 0xA3	; 163
 7dc:	de 4f       	sbci	r29, 0xFE	; 254
 7de:	48 80       	ld	r4, Y
 7e0:	59 80       	ldd	r5, Y+1	; 0x01
 7e2:	6a 80       	ldd	r6, Y+2	; 0x02
 7e4:	7b 80       	ldd	r7, Y+3	; 0x03
 7e6:	cd 55       	subi	r28, 0x5D	; 93
 7e8:	d1 40       	sbci	r29, 0x01	; 1
 7ea:	84 0d       	add	r24, r4
 7ec:	95 1d       	adc	r25, r5
 7ee:	a6 1d       	adc	r26, r6
 7f0:	b7 1d       	adc	r27, r7
 7f2:	80 8b       	std	Z+16, r24	; 0x10
 7f4:	91 8b       	std	Z+17, r25	; 0x11
 7f6:	a2 8b       	std	Z+18, r26	; 0x12
 7f8:	b3 8b       	std	Z+19, r27	; 0x13
}
 7fa:	cc 59       	subi	r28, 0x9C	; 156
 7fc:	de 4f       	sbci	r29, 0xFE	; 254
 7fe:	0f b6       	in	r0, 0x3f	; 63
 800:	f8 94       	cli
 802:	de bf       	out	0x3e, r29	; 62
 804:	0f be       	out	0x3f, r0	; 63
 806:	cd bf       	out	0x3d, r28	; 61
 808:	df 91       	pop	r29
 80a:	cf 91       	pop	r28
 80c:	1f 91       	pop	r17
 80e:	0f 91       	pop	r16
 810:	ff 90       	pop	r15
 812:	ef 90       	pop	r14
 814:	df 90       	pop	r13
 816:	cf 90       	pop	r12
 818:	bf 90       	pop	r11
 81a:	af 90       	pop	r10
 81c:	9f 90       	pop	r9
 81e:	8f 90       	pop	r8
 820:	7f 90       	pop	r7
 822:	6f 90       	pop	r6
 824:	5f 90       	pop	r5
 826:	4f 90       	pop	r4
 828:	3f 90       	pop	r3
 82a:	2f 90       	pop	r2
 82c:	08 95       	ret

0000082e <sha1_init>:

void sha1_init(SHA1_CTX *context) {
 82e:	fc 01       	movw	r30, r24
	//context->count[0] = context->count[1] = 0;
	context->state[0] = 0x67452301;
 830:	81 e0       	ldi	r24, 0x01	; 1
 832:	93 e2       	ldi	r25, 0x23	; 35
 834:	a5 e4       	ldi	r26, 0x45	; 69
 836:	b7 e6       	ldi	r27, 0x67	; 103
 838:	80 83       	st	Z, r24
 83a:	91 83       	std	Z+1, r25	; 0x01
 83c:	a2 83       	std	Z+2, r26	; 0x02
 83e:	b3 83       	std	Z+3, r27	; 0x03
	context->state[1] = 0xEFCDAB89;
 840:	89 e8       	ldi	r24, 0x89	; 137
 842:	9b ea       	ldi	r25, 0xAB	; 171
 844:	ad ec       	ldi	r26, 0xCD	; 205
 846:	bf ee       	ldi	r27, 0xEF	; 239
 848:	84 83       	std	Z+4, r24	; 0x04
 84a:	95 83       	std	Z+5, r25	; 0x05
 84c:	a6 83       	std	Z+6, r26	; 0x06
 84e:	b7 83       	std	Z+7, r27	; 0x07
	context->state[2] = 0x98BADCFE;
 850:	8e ef       	ldi	r24, 0xFE	; 254
 852:	9c ed       	ldi	r25, 0xDC	; 220
 854:	aa eb       	ldi	r26, 0xBA	; 186
 856:	b8 e9       	ldi	r27, 0x98	; 152
 858:	80 87       	std	Z+8, r24	; 0x08
 85a:	91 87       	std	Z+9, r25	; 0x09
 85c:	a2 87       	std	Z+10, r26	; 0x0a
 85e:	b3 87       	std	Z+11, r27	; 0x0b
	context->state[3] = 0x10325476;
 860:	86 e7       	ldi	r24, 0x76	; 118
 862:	94 e5       	ldi	r25, 0x54	; 84
 864:	a2 e3       	ldi	r26, 0x32	; 50
 866:	b0 e1       	ldi	r27, 0x10	; 16
 868:	84 87       	std	Z+12, r24	; 0x0c
 86a:	95 87       	std	Z+13, r25	; 0x0d
 86c:	a6 87       	std	Z+14, r26	; 0x0e
 86e:	b7 87       	std	Z+15, r27	; 0x0f
	context->state[4] = 0xC3D2E1F0;
 870:	80 ef       	ldi	r24, 0xF0	; 240
 872:	91 ee       	ldi	r25, 0xE1	; 225
 874:	a2 ed       	ldi	r26, 0xD2	; 210
 876:	b3 ec       	ldi	r27, 0xC3	; 195
 878:	80 8b       	std	Z+16, r24	; 0x10
 87a:	91 8b       	std	Z+17, r25	; 0x11
 87c:	a2 8b       	std	Z+18, r26	; 0x12
 87e:	b3 8b       	std	Z+19, r27	; 0x13
 880:	08 95       	ret

00000882 <sha1_update>:
}

void sha1_update(SHA1_CTX *context, const uint8_t *data, uint32_t len) {
 882:	8f 92       	push	r8
 884:	9f 92       	push	r9
 886:	af 92       	push	r10
 888:	bf 92       	push	r11
 88a:	cf 92       	push	r12
 88c:	df 92       	push	r13
 88e:	ef 92       	push	r14
 890:	ff 92       	push	r15
 892:	0f 93       	push	r16
 894:	1f 93       	push	r17
 896:	cf 93       	push	r28
 898:	df 93       	push	r29
 89a:	ec 01       	movw	r28, r24
 89c:	8b 01       	movw	r16, r22
 89e:	49 01       	movw	r8, r18
 8a0:	5a 01       	movw	r10, r20
	uint32_t i, j;

	j = (context->count[0] >> 3) & 63;
 8a2:	4c 89       	ldd	r20, Y+20	; 0x14
 8a4:	5d 89       	ldd	r21, Y+21	; 0x15
 8a6:	6e 89       	ldd	r22, Y+22	; 0x16
 8a8:	7f 89       	ldd	r23, Y+23	; 0x17
 8aa:	db 01       	movw	r26, r22
 8ac:	ca 01       	movw	r24, r20
 8ae:	68 94       	set
 8b0:	12 f8       	bld	r1, 2
 8b2:	b6 95       	lsr	r27
 8b4:	a7 95       	ror	r26
 8b6:	97 95       	ror	r25
 8b8:	87 95       	ror	r24
 8ba:	16 94       	lsr	r1
 8bc:	d1 f7       	brne	.-12     	; 0x8b2 <sha1_update+0x30>
 8be:	8f 73       	andi	r24, 0x3F	; 63
 8c0:	99 27       	eor	r25, r25
 8c2:	aa 27       	eor	r26, r26
 8c4:	bb 27       	eor	r27, r27
	if ((context->count[0] += len << 3) < (len << 3))
 8c6:	75 01       	movw	r14, r10
 8c8:	64 01       	movw	r12, r8
 8ca:	cc 0c       	add	r12, r12
 8cc:	dd 1c       	adc	r13, r13
 8ce:	ee 1c       	adc	r14, r14
 8d0:	ff 1c       	adc	r15, r15
 8d2:	cc 0c       	add	r12, r12
 8d4:	dd 1c       	adc	r13, r13
 8d6:	ee 1c       	adc	r14, r14
 8d8:	ff 1c       	adc	r15, r15
 8da:	cc 0c       	add	r12, r12
 8dc:	dd 1c       	adc	r13, r13
 8de:	ee 1c       	adc	r14, r14
 8e0:	ff 1c       	adc	r15, r15
 8e2:	4c 0d       	add	r20, r12
 8e4:	5d 1d       	adc	r21, r13
 8e6:	6e 1d       	adc	r22, r14
 8e8:	7f 1d       	adc	r23, r15
 8ea:	4c 8b       	std	Y+20, r20	; 0x14
 8ec:	5d 8b       	std	Y+21, r21	; 0x15
 8ee:	6e 8b       	std	Y+22, r22	; 0x16
 8f0:	7f 8b       	std	Y+23, r23	; 0x17
 8f2:	4c 15       	cp	r20, r12
 8f4:	5d 05       	cpc	r21, r13
 8f6:	6e 05       	cpc	r22, r14
 8f8:	7f 05       	cpc	r23, r15
 8fa:	60 f4       	brcc	.+24     	; 0x914 <__stack+0x15>
	context->count[1]++;
 8fc:	48 8d       	ldd	r20, Y+24	; 0x18
 8fe:	59 8d       	ldd	r21, Y+25	; 0x19
 900:	6a 8d       	ldd	r22, Y+26	; 0x1a
 902:	7b 8d       	ldd	r23, Y+27	; 0x1b
 904:	4f 5f       	subi	r20, 0xFF	; 255
 906:	5f 4f       	sbci	r21, 0xFF	; 255
 908:	6f 4f       	sbci	r22, 0xFF	; 255
 90a:	7f 4f       	sbci	r23, 0xFF	; 255
 90c:	48 8f       	std	Y+24, r20	; 0x18
 90e:	59 8f       	std	Y+25, r21	; 0x19
 910:	6a 8f       	std	Y+26, r22	; 0x1a
 912:	7b 8f       	std	Y+27, r23	; 0x1b
	context->count[1] += (len >> 29);
 914:	c8 8c       	ldd	r12, Y+24	; 0x18
 916:	d9 8c       	ldd	r13, Y+25	; 0x19
 918:	ea 8c       	ldd	r14, Y+26	; 0x1a
 91a:	fb 8c       	ldd	r15, Y+27	; 0x1b
 91c:	b5 01       	movw	r22, r10
 91e:	a4 01       	movw	r20, r8
 920:	03 2e       	mov	r0, r19
 922:	3d e1       	ldi	r19, 0x1D	; 29
 924:	76 95       	lsr	r23
 926:	67 95       	ror	r22
 928:	57 95       	ror	r21
 92a:	47 95       	ror	r20
 92c:	3a 95       	dec	r19
 92e:	d1 f7       	brne	.-12     	; 0x924 <__stack+0x25>
 930:	30 2d       	mov	r19, r0
 932:	4c 0d       	add	r20, r12
 934:	5d 1d       	adc	r21, r13
 936:	6e 1d       	adc	r22, r14
 938:	7f 1d       	adc	r23, r15
 93a:	48 8f       	std	Y+24, r20	; 0x18
 93c:	59 8f       	std	Y+25, r21	; 0x19
 93e:	6a 8f       	std	Y+26, r22	; 0x1a
 940:	7b 8f       	std	Y+27, r23	; 0x1b

	for (i = 0; i < len; i++) {
 942:	c1 2c       	mov	r12, r1
 944:	d1 2c       	mov	r13, r1
 946:	76 01       	movw	r14, r12
 948:	23 c0       	rjmp	.+70     	; 0x990 <__stack+0x91>
		context->buffer[j++] = data[i];
 94a:	ac 01       	movw	r20, r24
 94c:	bd 01       	movw	r22, r26
 94e:	4f 5f       	subi	r20, 0xFF	; 255
 950:	5f 4f       	sbci	r21, 0xFF	; 255
 952:	6f 4f       	sbci	r22, 0xFF	; 255
 954:	7f 4f       	sbci	r23, 0xFF	; 255
 956:	f8 01       	movw	r30, r16
 958:	ec 0d       	add	r30, r12
 95a:	fd 1d       	adc	r31, r13
 95c:	20 81       	ld	r18, Z
 95e:	fe 01       	movw	r30, r28
 960:	e8 0f       	add	r30, r24
 962:	f9 1f       	adc	r31, r25
 964:	24 8f       	std	Z+28, r18	; 0x1c
		if (j == 64) {
 966:	40 34       	cpi	r20, 0x40	; 64
 968:	51 05       	cpc	r21, r1
 96a:	61 05       	cpc	r22, r1
 96c:	71 05       	cpc	r23, r1
 96e:	49 f4       	brne	.+18     	; 0x982 <__stack+0x83>
			sha1_transform(context, context->buffer);
 970:	be 01       	movw	r22, r28
 972:	64 5e       	subi	r22, 0xE4	; 228
 974:	7f 4f       	sbci	r23, 0xFF	; 255
 976:	ce 01       	movw	r24, r28
 978:	0e 94 c6 00 	call	0x18c	; 0x18c <sha1_transform>
			j = 0;
 97c:	40 e0       	ldi	r20, 0x00	; 0
 97e:	50 e0       	ldi	r21, 0x00	; 0
 980:	ba 01       	movw	r22, r20
	j = (context->count[0] >> 3) & 63;
	if ((context->count[0] += len << 3) < (len << 3))
	context->count[1]++;
	context->count[1] += (len >> 29);

	for (i = 0; i < len; i++) {
 982:	8f ef       	ldi	r24, 0xFF	; 255
 984:	c8 1a       	sub	r12, r24
 986:	d8 0a       	sbc	r13, r24
 988:	e8 0a       	sbc	r14, r24
 98a:	f8 0a       	sbc	r15, r24
 98c:	db 01       	movw	r26, r22
 98e:	ca 01       	movw	r24, r20
 990:	c8 14       	cp	r12, r8
 992:	d9 04       	cpc	r13, r9
 994:	ea 04       	cpc	r14, r10
 996:	fb 04       	cpc	r15, r11
 998:	c0 f2       	brcs	.-80     	; 0x94a <__stack+0x4b>
		if (j == 64) {
			sha1_transform(context, context->buffer);
			j = 0;
		}
	}
}
 99a:	df 91       	pop	r29
 99c:	cf 91       	pop	r28
 99e:	1f 91       	pop	r17
 9a0:	0f 91       	pop	r16
 9a2:	ff 90       	pop	r15
 9a4:	ef 90       	pop	r14
 9a6:	df 90       	pop	r13
 9a8:	cf 90       	pop	r12
 9aa:	bf 90       	pop	r11
 9ac:	af 90       	pop	r10
 9ae:	9f 90       	pop	r9
 9b0:	8f 90       	pop	r8
 9b2:	08 95       	ret

000009b4 <sha1_final>:

void sha1_final(SHA1_CTX *context, uint8_t digest[SHA1_BLOCK_SIZE]) {
 9b4:	4f 92       	push	r4
 9b6:	5f 92       	push	r5
 9b8:	6f 92       	push	r6
 9ba:	7f 92       	push	r7
 9bc:	8f 92       	push	r8
 9be:	9f 92       	push	r9
 9c0:	af 92       	push	r10
 9c2:	bf 92       	push	r11
 9c4:	ef 92       	push	r14
 9c6:	ff 92       	push	r15
 9c8:	0f 93       	push	r16
 9ca:	1f 93       	push	r17
 9cc:	cf 93       	push	r28
 9ce:	df 93       	push	r29
 9d0:	cd b7       	in	r28, 0x3d	; 61
 9d2:	de b7       	in	r29, 0x3e	; 62
 9d4:	28 97       	sbiw	r28, 0x08	; 8
 9d6:	0f b6       	in	r0, 0x3f	; 63
 9d8:	f8 94       	cli
 9da:	de bf       	out	0x3e, r29	; 62
 9dc:	0f be       	out	0x3f, r0	; 63
 9de:	cd bf       	out	0x3d, r28	; 61
 9e0:	8c 01       	movw	r16, r24
 9e2:	7b 01       	movw	r14, r22
	uint8_t finalcount[8];
	uint32_t i;

	for (i = 0; i < 8; i++)
 9e4:	40 e0       	ldi	r20, 0x00	; 0
 9e6:	50 e0       	ldi	r21, 0x00	; 0
 9e8:	ba 01       	movw	r22, r20
 9ea:	37 c0       	rjmp	.+110    	; 0xa5a <sha1_final+0xa6>
	finalcount[i] = (uint8_t)((context->count[(i >= 4 ? 0 : 1)] >>
 9ec:	81 e0       	ldi	r24, 0x01	; 1
 9ee:	90 e0       	ldi	r25, 0x00	; 0
 9f0:	44 30       	cpi	r20, 0x04	; 4
 9f2:	51 05       	cpc	r21, r1
 9f4:	61 05       	cpc	r22, r1
 9f6:	71 05       	cpc	r23, r1
 9f8:	10 f0       	brcs	.+4      	; 0x9fe <sha1_final+0x4a>
 9fa:	80 e0       	ldi	r24, 0x00	; 0
 9fc:	90 e0       	ldi	r25, 0x00	; 0
 9fe:	fc 01       	movw	r30, r24
 a00:	35 96       	adiw	r30, 0x05	; 5
 a02:	ee 0f       	add	r30, r30
 a04:	ff 1f       	adc	r31, r31
 a06:	ee 0f       	add	r30, r30
 a08:	ff 1f       	adc	r31, r31
 a0a:	e0 0f       	add	r30, r16
 a0c:	f1 1f       	adc	r31, r17
 a0e:	80 80       	ld	r8, Z
 a10:	91 80       	ldd	r9, Z+1	; 0x01
 a12:	a2 80       	ldd	r10, Z+2	; 0x02
 a14:	b3 80       	ldd	r11, Z+3	; 0x03
	((3 - (i & 3)) * 8)) &
 a16:	db 01       	movw	r26, r22
 a18:	ca 01       	movw	r24, r20
 a1a:	80 95       	com	r24
 a1c:	90 95       	com	r25
 a1e:	a0 95       	com	r26
 a20:	b0 95       	com	r27
void sha1_final(SHA1_CTX *context, uint8_t digest[SHA1_BLOCK_SIZE]) {
	uint8_t finalcount[8];
	uint32_t i;

	for (i = 0; i < 8; i++)
	finalcount[i] = (uint8_t)((context->count[(i >= 4 ? 0 : 1)] >>
 a22:	83 70       	andi	r24, 0x03	; 3
 a24:	99 27       	eor	r25, r25
 a26:	88 0f       	add	r24, r24
 a28:	99 1f       	adc	r25, r25
 a2a:	88 0f       	add	r24, r24
 a2c:	99 1f       	adc	r25, r25
 a2e:	88 0f       	add	r24, r24
 a30:	99 1f       	adc	r25, r25
 a32:	24 01       	movw	r4, r8
 a34:	35 01       	movw	r6, r10
 a36:	04 c0       	rjmp	.+8      	; 0xa40 <sha1_final+0x8c>
 a38:	76 94       	lsr	r7
 a3a:	67 94       	ror	r6
 a3c:	57 94       	ror	r5
 a3e:	47 94       	ror	r4
 a40:	8a 95       	dec	r24
 a42:	d2 f7       	brpl	.-12     	; 0xa38 <sha1_final+0x84>
 a44:	e1 e0       	ldi	r30, 0x01	; 1
 a46:	f0 e0       	ldi	r31, 0x00	; 0
 a48:	ec 0f       	add	r30, r28
 a4a:	fd 1f       	adc	r31, r29
 a4c:	e4 0f       	add	r30, r20
 a4e:	f5 1f       	adc	r31, r21
 a50:	40 82       	st	Z, r4

void sha1_final(SHA1_CTX *context, uint8_t digest[SHA1_BLOCK_SIZE]) {
	uint8_t finalcount[8];
	uint32_t i;

	for (i = 0; i < 8; i++)
 a52:	4f 5f       	subi	r20, 0xFF	; 255
 a54:	5f 4f       	sbci	r21, 0xFF	; 255
 a56:	6f 4f       	sbci	r22, 0xFF	; 255
 a58:	7f 4f       	sbci	r23, 0xFF	; 255
 a5a:	48 30       	cpi	r20, 0x08	; 8
 a5c:	51 05       	cpc	r21, r1
 a5e:	61 05       	cpc	r22, r1
 a60:	71 05       	cpc	r23, r1
 a62:	20 f2       	brcs	.-120    	; 0x9ec <sha1_final+0x38>
	finalcount[i] = (uint8_t)((context->count[(i >= 4 ? 0 : 1)] >>
	((3 - (i & 3)) * 8)) &
	255);

	sha1_update(context, (uint8_t *)"\x80", 1);
 a64:	21 e0       	ldi	r18, 0x01	; 1
 a66:	30 e0       	ldi	r19, 0x00	; 0
 a68:	40 e0       	ldi	r20, 0x00	; 0
 a6a:	50 e0       	ldi	r21, 0x00	; 0
 a6c:	61 e2       	ldi	r22, 0x21	; 33
 a6e:	71 e0       	ldi	r23, 0x01	; 1
 a70:	c8 01       	movw	r24, r16
 a72:	0e 94 41 04 	call	0x882	; 0x882 <sha1_update>
	while ((context->count[0] & 504) != 448)
 a76:	09 c0       	rjmp	.+18     	; 0xa8a <sha1_final+0xd6>
	sha1_update(context, (uint8_t *)"\x00", 1);
 a78:	21 e0       	ldi	r18, 0x01	; 1
 a7a:	30 e0       	ldi	r19, 0x00	; 0
 a7c:	40 e0       	ldi	r20, 0x00	; 0
 a7e:	50 e0       	ldi	r21, 0x00	; 0
 a80:	60 e0       	ldi	r22, 0x00	; 0
 a82:	71 e0       	ldi	r23, 0x01	; 1
 a84:	c8 01       	movw	r24, r16
 a86:	0e 94 41 04 	call	0x882	; 0x882 <sha1_update>
	finalcount[i] = (uint8_t)((context->count[(i >= 4 ? 0 : 1)] >>
	((3 - (i & 3)) * 8)) &
	255);

	sha1_update(context, (uint8_t *)"\x80", 1);
	while ((context->count[0] & 504) != 448)
 a8a:	f8 01       	movw	r30, r16
 a8c:	84 89       	ldd	r24, Z+20	; 0x14
 a8e:	95 89       	ldd	r25, Z+21	; 0x15
 a90:	a6 89       	ldd	r26, Z+22	; 0x16
 a92:	b7 89       	ldd	r27, Z+23	; 0x17
 a94:	88 7f       	andi	r24, 0xF8	; 248
 a96:	91 70       	andi	r25, 0x01	; 1
 a98:	aa 27       	eor	r26, r26
 a9a:	bb 27       	eor	r27, r27
 a9c:	80 3c       	cpi	r24, 0xC0	; 192
 a9e:	91 40       	sbci	r25, 0x01	; 1
 aa0:	a1 05       	cpc	r26, r1
 aa2:	b1 05       	cpc	r27, r1
 aa4:	49 f7       	brne	.-46     	; 0xa78 <sha1_final+0xc4>
	sha1_update(context, (uint8_t *)"\x00", 1);

	sha1_update(context, finalcount, 8);
 aa6:	28 e0       	ldi	r18, 0x08	; 8
 aa8:	30 e0       	ldi	r19, 0x00	; 0
 aaa:	40 e0       	ldi	r20, 0x00	; 0
 aac:	50 e0       	ldi	r21, 0x00	; 0
 aae:	be 01       	movw	r22, r28
 ab0:	6f 5f       	subi	r22, 0xFF	; 255
 ab2:	7f 4f       	sbci	r23, 0xFF	; 255
 ab4:	c8 01       	movw	r24, r16
 ab6:	0e 94 41 04 	call	0x882	; 0x882 <sha1_update>

	for (i = 0; i < 20; i++)
 aba:	80 e0       	ldi	r24, 0x00	; 0
 abc:	90 e0       	ldi	r25, 0x00	; 0
 abe:	dc 01       	movw	r26, r24
 ac0:	34 c0       	rjmp	.+104    	; 0xb2a <sha1_final+0x176>
	digest[i] = (uint8_t)((context->state[i >> 2] >> ((3 - (i & 3)) * 8)) & 255);
 ac2:	97 01       	movw	r18, r14
 ac4:	28 0f       	add	r18, r24
 ac6:	39 1f       	adc	r19, r25
 ac8:	ac 01       	movw	r20, r24
 aca:	bd 01       	movw	r22, r26
 acc:	76 95       	lsr	r23
 ace:	67 95       	ror	r22
 ad0:	57 95       	ror	r21
 ad2:	47 95       	ror	r20
 ad4:	76 95       	lsr	r23
 ad6:	67 95       	ror	r22
 ad8:	57 95       	ror	r21
 ada:	47 95       	ror	r20
 adc:	44 0f       	add	r20, r20
 ade:	55 1f       	adc	r21, r21
 ae0:	44 0f       	add	r20, r20
 ae2:	55 1f       	adc	r21, r21
 ae4:	40 0f       	add	r20, r16
 ae6:	51 1f       	adc	r21, r17
 ae8:	fa 01       	movw	r30, r20
 aea:	80 80       	ld	r8, Z
 aec:	91 80       	ldd	r9, Z+1	; 0x01
 aee:	a2 80       	ldd	r10, Z+2	; 0x02
 af0:	b3 80       	ldd	r11, Z+3	; 0x03
 af2:	ac 01       	movw	r20, r24
 af4:	bd 01       	movw	r22, r26
 af6:	40 95       	com	r20
 af8:	50 95       	com	r21
 afa:	60 95       	com	r22
 afc:	70 95       	com	r23
 afe:	43 70       	andi	r20, 0x03	; 3
 b00:	55 27       	eor	r21, r21
 b02:	44 0f       	add	r20, r20
 b04:	55 1f       	adc	r21, r21
 b06:	44 0f       	add	r20, r20
 b08:	55 1f       	adc	r21, r21
 b0a:	44 0f       	add	r20, r20
 b0c:	55 1f       	adc	r21, r21
 b0e:	24 01       	movw	r4, r8
 b10:	35 01       	movw	r6, r10
 b12:	04 c0       	rjmp	.+8      	; 0xb1c <sha1_final+0x168>
 b14:	76 94       	lsr	r7
 b16:	67 94       	ror	r6
 b18:	57 94       	ror	r5
 b1a:	47 94       	ror	r4
 b1c:	4a 95       	dec	r20
 b1e:	d2 f7       	brpl	.-12     	; 0xb14 <sha1_final+0x160>
 b20:	f9 01       	movw	r30, r18
 b22:	40 82       	st	Z, r4
	while ((context->count[0] & 504) != 448)
	sha1_update(context, (uint8_t *)"\x00", 1);

	sha1_update(context, finalcount, 8);

	for (i = 0; i < 20; i++)
 b24:	01 96       	adiw	r24, 0x01	; 1
 b26:	a1 1d       	adc	r26, r1
 b28:	b1 1d       	adc	r27, r1
 b2a:	84 31       	cpi	r24, 0x14	; 20
 b2c:	91 05       	cpc	r25, r1
 b2e:	a1 05       	cpc	r26, r1
 b30:	b1 05       	cpc	r27, r1
 b32:	38 f2       	brcs	.-114    	; 0xac2 <sha1_final+0x10e>
	digest[i] = (uint8_t)((context->state[i >> 2] >> ((3 - (i & 3)) * 8)) & 255);
}
 b34:	28 96       	adiw	r28, 0x08	; 8
 b36:	0f b6       	in	r0, 0x3f	; 63
 b38:	f8 94       	cli
 b3a:	de bf       	out	0x3e, r29	; 62
 b3c:	0f be       	out	0x3f, r0	; 63
 b3e:	cd bf       	out	0x3d, r28	; 61
 b40:	df 91       	pop	r29
 b42:	cf 91       	pop	r28
 b44:	1f 91       	pop	r17
 b46:	0f 91       	pop	r16
 b48:	ff 90       	pop	r15
 b4a:	ef 90       	pop	r14
 b4c:	bf 90       	pop	r11
 b4e:	af 90       	pop	r10
 b50:	9f 90       	pop	r9
 b52:	8f 90       	pop	r8
 b54:	7f 90       	pop	r7
 b56:	6f 90       	pop	r6
 b58:	5f 90       	pop	r5
 b5a:	4f 90       	pop	r4
 b5c:	08 95       	ret

00000b5e <usart_init>:
	uart_sendString(mes);
	
	uart_sendString(String);

	uart_sendByte(newline);
}
 b5e:	a0 e0       	ldi	r26, 0x00	; 0
 b60:	b0 e0       	ldi	r27, 0x00	; 0
 b62:	88 0f       	add	r24, r24
 b64:	99 1f       	adc	r25, r25
 b66:	aa 1f       	adc	r26, r26
 b68:	bb 1f       	adc	r27, r27
 b6a:	88 0f       	add	r24, r24
 b6c:	99 1f       	adc	r25, r25
 b6e:	aa 1f       	adc	r26, r26
 b70:	bb 1f       	adc	r27, r27
 b72:	9c 01       	movw	r18, r24
 b74:	ad 01       	movw	r20, r26
 b76:	22 0f       	add	r18, r18
 b78:	33 1f       	adc	r19, r19
 b7a:	44 1f       	adc	r20, r20
 b7c:	55 1f       	adc	r21, r21
 b7e:	22 0f       	add	r18, r18
 b80:	33 1f       	adc	r19, r19
 b82:	44 1f       	adc	r20, r20
 b84:	55 1f       	adc	r21, r21
 b86:	60 e0       	ldi	r22, 0x00	; 0
 b88:	74 e2       	ldi	r23, 0x24	; 36
 b8a:	84 ef       	ldi	r24, 0xF4	; 244
 b8c:	90 e0       	ldi	r25, 0x00	; 0
 b8e:	0e 94 91 06 	call	0xd22	; 0xd22 <__udivmodsi4>
 b92:	21 50       	subi	r18, 0x01	; 1
 b94:	31 09       	sbc	r19, r1
 b96:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 b9a:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 b9e:	88 e9       	ldi	r24, 0x98	; 152
 ba0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 ba4:	86 e0       	ldi	r24, 0x06	; 6
 ba6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 baa:	78 94       	sei
 bac:	08 95       	ret

00000bae <uart_sendByte>:
 bae:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 bb2:	95 ff       	sbrs	r25, 5
 bb4:	fc cf       	rjmp	.-8      	; 0xbae <uart_sendByte>
 bb6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 bba:	08 95       	ret

00000bbc <uart_sendString>:
 bbc:	cf 93       	push	r28
 bbe:	df 93       	push	r29
 bc0:	ec 01       	movw	r28, r24
 bc2:	03 c0       	rjmp	.+6      	; 0xbca <uart_sendString+0xe>
 bc4:	21 96       	adiw	r28, 0x01	; 1
 bc6:	0e 94 d7 05 	call	0xbae	; 0xbae <uart_sendByte>
 bca:	88 81       	ld	r24, Y
 bcc:	81 11       	cpse	r24, r1
 bce:	fa cf       	rjmp	.-12     	; 0xbc4 <uart_sendString+0x8>
 bd0:	df 91       	pop	r29
 bd2:	cf 91       	pop	r28
 bd4:	08 95       	ret

00000bd6 <uart_transmit_hex>:
 bd6:	1f 93       	push	r17
 bd8:	cf 93       	push	r28
 bda:	df 93       	push	r29
 bdc:	cd b7       	in	r28, 0x3d	; 61
 bde:	de b7       	in	r29, 0x3e	; 62
 be0:	61 97       	sbiw	r28, 0x11	; 17
 be2:	0f b6       	in	r0, 0x3f	; 63
 be4:	f8 94       	cli
 be6:	de bf       	out	0x3e, r29	; 62
 be8:	0f be       	out	0x3f, r0	; 63
 bea:	cd bf       	out	0x3d, r28	; 61
 bec:	18 2f       	mov	r17, r24
 bee:	81 e1       	ldi	r24, 0x11	; 17
 bf0:	e3 e2       	ldi	r30, 0x23	; 35
 bf2:	f1 e0       	ldi	r31, 0x01	; 1
 bf4:	de 01       	movw	r26, r28
 bf6:	11 96       	adiw	r26, 0x01	; 1
 bf8:	01 90       	ld	r0, Z+
 bfa:	0d 92       	st	X+, r0
 bfc:	8a 95       	dec	r24
 bfe:	e1 f7       	brne	.-8      	; 0xbf8 <uart_transmit_hex+0x22>
 c00:	81 2f       	mov	r24, r17
 c02:	82 95       	swap	r24
 c04:	8f 70       	andi	r24, 0x0F	; 15
 c06:	e1 e0       	ldi	r30, 0x01	; 1
 c08:	f0 e0       	ldi	r31, 0x00	; 0
 c0a:	ec 0f       	add	r30, r28
 c0c:	fd 1f       	adc	r31, r29
 c0e:	e8 0f       	add	r30, r24
 c10:	f1 1d       	adc	r31, r1
 c12:	80 81       	ld	r24, Z
 c14:	0e 94 d7 05 	call	0xbae	; 0xbae <uart_sendByte>
 c18:	1f 70       	andi	r17, 0x0F	; 15
 c1a:	e1 e0       	ldi	r30, 0x01	; 1
 c1c:	f0 e0       	ldi	r31, 0x00	; 0
 c1e:	ec 0f       	add	r30, r28
 c20:	fd 1f       	adc	r31, r29
 c22:	e1 0f       	add	r30, r17
 c24:	f1 1d       	adc	r31, r1
 c26:	80 81       	ld	r24, Z
 c28:	0e 94 d7 05 	call	0xbae	; 0xbae <uart_sendByte>
 c2c:	61 96       	adiw	r28, 0x11	; 17
 c2e:	0f b6       	in	r0, 0x3f	; 63
 c30:	f8 94       	cli
 c32:	de bf       	out	0x3e, r29	; 62
 c34:	0f be       	out	0x3f, r0	; 63
 c36:	cd bf       	out	0x3d, r28	; 61
 c38:	df 91       	pop	r29
 c3a:	cf 91       	pop	r28
 c3c:	1f 91       	pop	r17
 c3e:	08 95       	ret

00000c40 <save>:

//receive data, write in buffer if there is space, delete buffer if full, check for start or answearsignal

void save(){
	//uart_sendByte(data);
		if(((rxBufPos + 1) % RX_BUFFER_SIZE) > 0){
 c40:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <rxBufPos>
 c44:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <rxBufPos+0x1>
 c48:	01 96       	adiw	r24, 0x01	; 1
 c4a:	93 70       	andi	r25, 0x03	; 3
 c4c:	89 2b       	or	r24, r25
 c4e:	91 f0       	breq	.+36     	; 0xc74 <save+0x34>
			rxBuffer[rxBufPos++] = data;				//geht hier das ++ in der abfrage oder muss das nach kommen?
 c50:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <rxBufPos>
 c54:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <rxBufPos+0x1>
 c58:	9c 01       	movw	r18, r24
 c5a:	2f 5f       	subi	r18, 0xFF	; 255
 c5c:	3f 4f       	sbci	r19, 0xFF	; 255
 c5e:	30 93 40 01 	sts	0x0140, r19	; 0x800140 <rxBufPos+0x1>
 c62:	20 93 3f 01 	sts	0x013F, r18	; 0x80013f <rxBufPos>
 c66:	20 91 41 01 	lds	r18, 0x0141	; 0x800141 <data>
 c6a:	fc 01       	movw	r30, r24
 c6c:	ee 5b       	subi	r30, 0xBE	; 190
 c6e:	fe 4f       	sbci	r31, 0xFE	; 254
 c70:	20 83       	st	Z, r18
 c72:	0e c0       	rjmp	.+28     	; 0xc90 <save+0x50>
			//rxBufPos++;
		} else {
			memset(rxBuffer, 0, RX_BUFFER_SIZE);
 c74:	80 e0       	ldi	r24, 0x00	; 0
 c76:	94 e0       	ldi	r25, 0x04	; 4
 c78:	e2 e4       	ldi	r30, 0x42	; 66
 c7a:	f1 e0       	ldi	r31, 0x01	; 1
 c7c:	df 01       	movw	r26, r30
 c7e:	9c 01       	movw	r18, r24
 c80:	1d 92       	st	X+, r1
 c82:	21 50       	subi	r18, 0x01	; 1
 c84:	30 40       	sbci	r19, 0x00	; 0
 c86:	e1 f7       	brne	.-8      	; 0xc80 <save+0x40>
			startFlag = 0;
 c88:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <startFlag>
			answearFlag = 0;
 c8c:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <answearFlag>
		}
		
		if (rxBufPos >= 2) {
 c90:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <rxBufPos>
 c94:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <rxBufPos+0x1>
 c98:	02 97       	sbiw	r24, 0x02	; 2
 c9a:	78 f1       	brcs	.+94     	; 0xcfa <save+0xba>
			if (rxBuffer[rxBufPos - 2] == '#' && rxBuffer[rxBufPos - 1] == '!') {
 c9c:	e0 91 3f 01 	lds	r30, 0x013F	; 0x80013f <rxBufPos>
 ca0:	f0 91 40 01 	lds	r31, 0x0140	; 0x800140 <rxBufPos+0x1>
 ca4:	e0 5c       	subi	r30, 0xC0	; 192
 ca6:	fe 4f       	sbci	r31, 0xFE	; 254
 ca8:	80 81       	ld	r24, Z
 caa:	83 32       	cpi	r24, 0x23	; 35
 cac:	69 f4       	brne	.+26     	; 0xcc8 <save+0x88>
 cae:	e0 91 3f 01 	lds	r30, 0x013F	; 0x80013f <rxBufPos>
 cb2:	f0 91 40 01 	lds	r31, 0x0140	; 0x800140 <rxBufPos+0x1>
 cb6:	ef 5b       	subi	r30, 0xBF	; 191
 cb8:	fe 4f       	sbci	r31, 0xFE	; 254
 cba:	80 81       	ld	r24, Z
 cbc:	81 32       	cpi	r24, 0x21	; 33
 cbe:	21 f4       	brne	.+8      	; 0xcc8 <save+0x88>
				startFlag = 1;
 cc0:	81 e0       	ldi	r24, 0x01	; 1
 cc2:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <startFlag>
 cc6:	08 95       	ret
			} else if (rxBuffer[rxBufPos - 2] == '#' && rxBuffer[rxBufPos - 1] == '$') {
 cc8:	e0 91 3f 01 	lds	r30, 0x013F	; 0x80013f <rxBufPos>
 ccc:	f0 91 40 01 	lds	r31, 0x0140	; 0x800140 <rxBufPos+0x1>
 cd0:	e0 5c       	subi	r30, 0xC0	; 192
 cd2:	fe 4f       	sbci	r31, 0xFE	; 254
 cd4:	80 81       	ld	r24, Z
 cd6:	83 32       	cpi	r24, 0x23	; 35
 cd8:	81 f4       	brne	.+32     	; 0xcfa <save+0xba>
 cda:	e0 91 3f 01 	lds	r30, 0x013F	; 0x80013f <rxBufPos>
 cde:	f0 91 40 01 	lds	r31, 0x0140	; 0x800140 <rxBufPos+0x1>
 ce2:	ef 5b       	subi	r30, 0xBF	; 191
 ce4:	fe 4f       	sbci	r31, 0xFE	; 254
 ce6:	80 81       	ld	r24, Z
 ce8:	84 32       	cpi	r24, 0x24	; 36
 cea:	39 f4       	brne	.+14     	; 0xcfa <save+0xba>
				answearFlag = 1;
 cec:	81 e0       	ldi	r24, 0x01	; 1
 cee:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <answearFlag>
			PORTB ^= ( 1 << PB5 );
 cf2:	95 b1       	in	r25, 0x05	; 5
 cf4:	80 e2       	ldi	r24, 0x20	; 32
 cf6:	89 27       	eor	r24, r25
 cf8:	85 b9       	out	0x05, r24	; 5
 cfa:	08 95       	ret

00000cfc <__vector_18>:
			}
		}
}

ISR(USART_RX_vect){
 cfc:	1f 92       	push	r1
 cfe:	0f 92       	push	r0
 d00:	0f b6       	in	r0, 0x3f	; 63
 d02:	0f 92       	push	r0
 d04:	11 24       	eor	r1, r1
 d06:	8f 93       	push	r24
	data = UDR0;
 d08:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 d0c:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <data>
	gotcalled = 1;
 d10:	81 e0       	ldi	r24, 0x01	; 1
 d12:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <__data_end>
}
 d16:	8f 91       	pop	r24
 d18:	0f 90       	pop	r0
 d1a:	0f be       	out	0x3f, r0	; 63
 d1c:	0f 90       	pop	r0
 d1e:	1f 90       	pop	r1
 d20:	18 95       	reti

00000d22 <__udivmodsi4>:
 d22:	a1 e2       	ldi	r26, 0x21	; 33
 d24:	1a 2e       	mov	r1, r26
 d26:	aa 1b       	sub	r26, r26
 d28:	bb 1b       	sub	r27, r27
 d2a:	fd 01       	movw	r30, r26
 d2c:	0d c0       	rjmp	.+26     	; 0xd48 <__udivmodsi4_ep>

00000d2e <__udivmodsi4_loop>:
 d2e:	aa 1f       	adc	r26, r26
 d30:	bb 1f       	adc	r27, r27
 d32:	ee 1f       	adc	r30, r30
 d34:	ff 1f       	adc	r31, r31
 d36:	a2 17       	cp	r26, r18
 d38:	b3 07       	cpc	r27, r19
 d3a:	e4 07       	cpc	r30, r20
 d3c:	f5 07       	cpc	r31, r21
 d3e:	20 f0       	brcs	.+8      	; 0xd48 <__udivmodsi4_ep>
 d40:	a2 1b       	sub	r26, r18
 d42:	b3 0b       	sbc	r27, r19
 d44:	e4 0b       	sbc	r30, r20
 d46:	f5 0b       	sbc	r31, r21

00000d48 <__udivmodsi4_ep>:
 d48:	66 1f       	adc	r22, r22
 d4a:	77 1f       	adc	r23, r23
 d4c:	88 1f       	adc	r24, r24
 d4e:	99 1f       	adc	r25, r25
 d50:	1a 94       	dec	r1
 d52:	69 f7       	brne	.-38     	; 0xd2e <__udivmodsi4_loop>
 d54:	60 95       	com	r22
 d56:	70 95       	com	r23
 d58:	80 95       	com	r24
 d5a:	90 95       	com	r25
 d5c:	9b 01       	movw	r18, r22
 d5e:	ac 01       	movw	r20, r24
 d60:	bd 01       	movw	r22, r26
 d62:	cf 01       	movw	r24, r30
 d64:	08 95       	ret

00000d66 <eeprom_update_block>:
 d66:	dc 01       	movw	r26, r24
 d68:	a4 0f       	add	r26, r20
 d6a:	b5 1f       	adc	r27, r21
 d6c:	41 50       	subi	r20, 0x01	; 1
 d6e:	50 40       	sbci	r21, 0x00	; 0
 d70:	48 f0       	brcs	.+18     	; 0xd84 <eeprom_update_block+0x1e>
 d72:	cb 01       	movw	r24, r22
 d74:	84 0f       	add	r24, r20
 d76:	95 1f       	adc	r25, r21
 d78:	2e 91       	ld	r18, -X
 d7a:	0e 94 c4 06 	call	0xd88	; 0xd88 <eeprom_update_r18>
 d7e:	41 50       	subi	r20, 0x01	; 1
 d80:	50 40       	sbci	r21, 0x00	; 0
 d82:	d0 f7       	brcc	.-12     	; 0xd78 <eeprom_update_block+0x12>
 d84:	08 95       	ret

00000d86 <eeprom_update_byte>:
 d86:	26 2f       	mov	r18, r22

00000d88 <eeprom_update_r18>:
 d88:	f9 99       	sbic	0x1f, 1	; 31
 d8a:	fe cf       	rjmp	.-4      	; 0xd88 <eeprom_update_r18>
 d8c:	92 bd       	out	0x22, r25	; 34
 d8e:	81 bd       	out	0x21, r24	; 33
 d90:	f8 9a       	sbi	0x1f, 0	; 31
 d92:	01 97       	sbiw	r24, 0x01	; 1
 d94:	00 b4       	in	r0, 0x20	; 32
 d96:	02 16       	cp	r0, r18
 d98:	39 f0       	breq	.+14     	; 0xda8 <eeprom_update_r18+0x20>
 d9a:	1f ba       	out	0x1f, r1	; 31
 d9c:	20 bd       	out	0x20, r18	; 32
 d9e:	0f b6       	in	r0, 0x3f	; 63
 da0:	f8 94       	cli
 da2:	fa 9a       	sbi	0x1f, 2	; 31
 da4:	f9 9a       	sbi	0x1f, 1	; 31
 da6:	0f be       	out	0x3f, r0	; 63
 da8:	08 95       	ret

00000daa <_exit>:
 daa:	f8 94       	cli

00000dac <__stop_program>:
 dac:	ff cf       	rjmp	.-2      	; 0xdac <__stop_program>
