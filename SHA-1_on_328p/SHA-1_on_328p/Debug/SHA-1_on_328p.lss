
SHA-1_on_328p.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000198  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000401  00800100  00800100  0000020c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000023c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008a4  00000000  00000000  000002dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000780  00000000  00000000  00000b80  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003cc  00000000  00000000  00001300  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ac  00000000  00000000  000016cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000408  00000000  00000000  00001778  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000a9  00000000  00000000  00001b80  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001c29  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 85 00 	jmp	0x10a	; 0x10a <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e9       	ldi	r30, 0x98	; 152
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	25 e0       	ldi	r18, 0x05	; 5
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 30       	cpi	r26, 0x01	; 1
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 ca 00 	jmp	0x194	; 0x194 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:

int main(void)
{
	//interrupts enabled after init
	//sei();
	usart_init(9600);
  a6:	80 e8       	ldi	r24, 0x80	; 128
  a8:	95 e2       	ldi	r25, 0x25	; 37
  aa:	0e 94 5a 00 	call	0xb4	; 0xb4 <usart_init>

    /* Replace with your application code */
    while (1) 
    {
	send();	
  ae:	0e 94 7d 00 	call	0xfa	; 0xfa <send>
  b2:	fd cf       	rjmp	.-6      	; 0xae <main+0x8>

000000b4 <usart_init>:
	/* ' for char litarals aka asci chars and " for strings with \0 terminator */
	if(1){
		return (rxBuffer[pos-1] == '#' && rxBuffer[pos] == '!');
	}
	return 0;
}
  b4:	82 95       	swap	r24
  b6:	92 95       	swap	r25
  b8:	90 7f       	andi	r25, 0xF0	; 240
  ba:	98 27       	eor	r25, r24
  bc:	80 7f       	andi	r24, 0xF0	; 240
  be:	98 27       	eor	r25, r24
  c0:	9c 01       	movw	r18, r24
  c2:	40 e0       	ldi	r20, 0x00	; 0
  c4:	50 e0       	ldi	r21, 0x00	; 0
  c6:	60 e0       	ldi	r22, 0x00	; 0
  c8:	74 e2       	ldi	r23, 0x24	; 36
  ca:	84 ef       	ldi	r24, 0xF4	; 244
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	0e 94 a8 00 	call	0x150	; 0x150 <__udivmodsi4>
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	31 09       	sbc	r19, r1
  d6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  da:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  de:	e1 ec       	ldi	r30, 0xC1	; 193
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	88 e1       	ldi	r24, 0x18	; 24
  e4:	80 83       	st	Z, r24
  e6:	a2 ec       	ldi	r26, 0xC2	; 194
  e8:	b0 e0       	ldi	r27, 0x00	; 0
  ea:	86 e0       	ldi	r24, 0x06	; 6
  ec:	8c 93       	st	X, r24
  ee:	80 e2       	ldi	r24, 0x20	; 32
  f0:	8c 93       	st	X, r24
  f2:	80 e8       	ldi	r24, 0x80	; 128
  f4:	80 83       	st	Z, r24
  f6:	78 94       	sei
  f8:	08 95       	ret

000000fa <send>:

void send() {
	while((UCSR0A & (1 << UDRE0)) == 0);
  fa:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  fe:	85 ff       	sbrs	r24, 5
 100:	fc cf       	rjmp	.-8      	; 0xfa <send>
	UDR0 = 'A';
 102:	81 e4       	ldi	r24, 0x41	; 65
 104:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 108:	08 95       	ret

0000010a <__vector_18>:
}

ISR(USART_RX_vect){
 10a:	1f 92       	push	r1
 10c:	0f 92       	push	r0
 10e:	0f b6       	in	r0, 0x3f	; 63
 110:	0f 92       	push	r0
 112:	11 24       	eor	r1, r1
 114:	2f 93       	push	r18
 116:	8f 93       	push	r24
 118:	9f 93       	push	r25
 11a:	ef 93       	push	r30
 11c:	ff 93       	push	r31
	
	uint8_t data = UDR0;
 11e:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	
	if( (pos + 1 ) % RX_BUFFER_SIZE != 0){
 122:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	01 96       	adiw	r24, 0x01	; 1
 12a:	01 96       	adiw	r24, 0x01	; 1
 12c:	03 97       	sbiw	r24, 0x03	; 3
 12e:	30 f0       	brcs	.+12     	; 0x13c <__vector_18+0x32>
		rxBuffer[pos] = data;
 130:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	ef 5f       	subi	r30, 0xFF	; 255
 138:	fe 4f       	sbci	r31, 0xFE	; 254
 13a:	20 83       	st	Z, r18
	} else {
		memset(rxBuffer, 0, RX_BUFFER_SIZE);
	}
*/
	
 13c:	ff 91       	pop	r31
 13e:	ef 91       	pop	r30
 140:	9f 91       	pop	r25
 142:	8f 91       	pop	r24
 144:	2f 91       	pop	r18
 146:	0f 90       	pop	r0
 148:	0f be       	out	0x3f, r0	; 63
 14a:	0f 90       	pop	r0
 14c:	1f 90       	pop	r1
 14e:	18 95       	reti

00000150 <__udivmodsi4>:
 150:	a1 e2       	ldi	r26, 0x21	; 33
 152:	1a 2e       	mov	r1, r26
 154:	aa 1b       	sub	r26, r26
 156:	bb 1b       	sub	r27, r27
 158:	fd 01       	movw	r30, r26
 15a:	0d c0       	rjmp	.+26     	; 0x176 <__udivmodsi4_ep>

0000015c <__udivmodsi4_loop>:
 15c:	aa 1f       	adc	r26, r26
 15e:	bb 1f       	adc	r27, r27
 160:	ee 1f       	adc	r30, r30
 162:	ff 1f       	adc	r31, r31
 164:	a2 17       	cp	r26, r18
 166:	b3 07       	cpc	r27, r19
 168:	e4 07       	cpc	r30, r20
 16a:	f5 07       	cpc	r31, r21
 16c:	20 f0       	brcs	.+8      	; 0x176 <__udivmodsi4_ep>
 16e:	a2 1b       	sub	r26, r18
 170:	b3 0b       	sbc	r27, r19
 172:	e4 0b       	sbc	r30, r20
 174:	f5 0b       	sbc	r31, r21

00000176 <__udivmodsi4_ep>:
 176:	66 1f       	adc	r22, r22
 178:	77 1f       	adc	r23, r23
 17a:	88 1f       	adc	r24, r24
 17c:	99 1f       	adc	r25, r25
 17e:	1a 94       	dec	r1
 180:	69 f7       	brne	.-38     	; 0x15c <__udivmodsi4_loop>
 182:	60 95       	com	r22
 184:	70 95       	com	r23
 186:	80 95       	com	r24
 188:	90 95       	com	r25
 18a:	9b 01       	movw	r18, r22
 18c:	ac 01       	movw	r20, r24
 18e:	bd 01       	movw	r22, r26
 190:	cf 01       	movw	r24, r30
 192:	08 95       	ret

00000194 <_exit>:
 194:	f8 94       	cli

00000196 <__stop_program>:
 196:	ff cf       	rjmp	.-2      	; 0x196 <__stop_program>
