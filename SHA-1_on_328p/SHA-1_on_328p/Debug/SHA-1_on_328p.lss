
SHA-1_on_328p.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  000002e0  00000374  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000406  00800114  00800114  00000388  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  000003f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c69  00000000  00000000  000004b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000081c  00000000  00000000  00001119  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000618  00000000  00000000  00001935  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000010c  00000000  00000000  00001f50  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000048b  00000000  00000000  0000205c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000247  00000000  00000000  000024e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  0000272e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 17 01 	jmp	0x22e	; 0x22e <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ee       	ldi	r30, 0xE0	; 224
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 31       	cpi	r26, 0x14	; 20
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	25 e0       	ldi	r18, 0x05	; 5
  8c:	a4 e1       	ldi	r26, 0x14	; 20
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 31       	cpi	r26, 0x1A	; 26
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 5c 00 	call	0xb8	; 0xb8 <main>
  9e:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <write_hash_eeprom>:

// sha-1 initial values, saves values in eeprom for keeping ram free, if they are not there already; eeprom_update_block for minimizing eeprom write cycles
const uint32_t sha1_initial_values[5] = {0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0};

void write_hash_eeprom(){
	eeprom_update_block(sha1_initial_values, EEPROM_HASH_ADRESS, sizeof(sha1_initial_values));
  a6:	44 e1       	ldi	r20, 0x14	; 20
  a8:	50 e0       	ldi	r21, 0x00	; 0
  aa:	60 e0       	ldi	r22, 0x00	; 0
  ac:	70 e0       	ldi	r23, 0x00	; 0
  ae:	80 e0       	ldi	r24, 0x00	; 0
  b0:	91 e0       	ldi	r25, 0x01	; 1
  b2:	0e 94 4c 01 	call	0x298	; 0x298 <eeprom_update_block>
  b6:	08 95       	ret

000000b8 <main>:



int main(void)
{
	write_hash_eeprom();
  b8:	0e 94 53 00 	call	0xa6	; 0xa6 <write_hash_eeprom>
	usart_init(9600);
  bc:	80 e8       	ldi	r24, 0x80	; 128
  be:	95 e2       	ldi	r25, 0x25	; 37
  c0:	0e 94 7c 00 	call	0xf8	; 0xf8 <usart_init>
	//UART_init();
	DDRB |= (1 << PB5);  // Setze PB0 als Ausgang (LED-Pin)
  c4:	84 b1       	in	r24, 0x04	; 4
  c6:	80 62       	ori	r24, 0x20	; 32
  c8:	84 b9       	out	0x04, r24	; 4

	
	
    while (1) {
		
		if(gotcalled){
  ca:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
  ce:	88 23       	and	r24, r24
  d0:	21 f0       	breq	.+8      	; 0xda <main+0x22>
			save();
  d2:	0e 94 b8 00 	call	0x170	; 0x170 <save>
			gotcalled = 0;
  d6:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <__data_end>
			//uart_sendByte(rxBuffer[rxBufPos-1]);
			//uart_sendArray(rxBuffer, rxBufPos);
		}
		
		if(answearFlag){
  da:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <answearFlag>
  de:	88 23       	and	r24, r24
  e0:	a1 f3       	breq	.-24     	; 0xca <main+0x12>
			uart_sendString(rxBuffer);
  e2:	8a e1       	ldi	r24, 0x1A	; 26
  e4:	91 e0       	ldi	r25, 0x01	; 1
  e6:	0e 94 ab 00 	call	0x156	; 0x156 <uart_sendString>
			PORTB ^= ( 1 << PB5 );
  ea:	95 b1       	in	r25, 0x05	; 5
  ec:	80 e2       	ldi	r24, 0x20	; 32
  ee:	89 27       	eor	r24, r25
  f0:	85 b9       	out	0x05, r24	; 5
			answearFlag = 0;
  f2:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <answearFlag>
  f6:	e9 cf       	rjmp	.-46     	; 0xca <main+0x12>

000000f8 <usart_init>:
	uart_sendString(mes);
	
	uart_sendString(String);

	uart_sendByte(newline);
}
  f8:	a0 e0       	ldi	r26, 0x00	; 0
  fa:	b0 e0       	ldi	r27, 0x00	; 0
  fc:	88 0f       	add	r24, r24
  fe:	99 1f       	adc	r25, r25
 100:	aa 1f       	adc	r26, r26
 102:	bb 1f       	adc	r27, r27
 104:	88 0f       	add	r24, r24
 106:	99 1f       	adc	r25, r25
 108:	aa 1f       	adc	r26, r26
 10a:	bb 1f       	adc	r27, r27
 10c:	9c 01       	movw	r18, r24
 10e:	ad 01       	movw	r20, r26
 110:	22 0f       	add	r18, r18
 112:	33 1f       	adc	r19, r19
 114:	44 1f       	adc	r20, r20
 116:	55 1f       	adc	r21, r21
 118:	22 0f       	add	r18, r18
 11a:	33 1f       	adc	r19, r19
 11c:	44 1f       	adc	r20, r20
 11e:	55 1f       	adc	r21, r21
 120:	60 e0       	ldi	r22, 0x00	; 0
 122:	74 e2       	ldi	r23, 0x24	; 36
 124:	84 ef       	ldi	r24, 0xF4	; 244
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	0e 94 2a 01 	call	0x254	; 0x254 <__udivmodsi4>
 12c:	21 50       	subi	r18, 0x01	; 1
 12e:	31 09       	sbc	r19, r1
 130:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 134:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 138:	88 e9       	ldi	r24, 0x98	; 152
 13a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 13e:	86 e0       	ldi	r24, 0x06	; 6
 140:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 144:	78 94       	sei
 146:	08 95       	ret

00000148 <uart_sendByte>:
 148:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 14c:	95 ff       	sbrs	r25, 5
 14e:	fc cf       	rjmp	.-8      	; 0x148 <uart_sendByte>
 150:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 154:	08 95       	ret

00000156 <uart_sendString>:
 156:	cf 93       	push	r28
 158:	df 93       	push	r29
 15a:	ec 01       	movw	r28, r24
 15c:	03 c0       	rjmp	.+6      	; 0x164 <uart_sendString+0xe>
 15e:	21 96       	adiw	r28, 0x01	; 1
 160:	0e 94 a4 00 	call	0x148	; 0x148 <uart_sendByte>
 164:	88 81       	ld	r24, Y
 166:	81 11       	cpse	r24, r1
 168:	fa cf       	rjmp	.-12     	; 0x15e <uart_sendString+0x8>
 16a:	df 91       	pop	r29
 16c:	cf 91       	pop	r28
 16e:	08 95       	ret

00000170 <save>:

//receive data, write in buffer if there is space, delete buffer if full

void save(){
	//uart_sendByte(data);
		if(((rxBufPos + 1) % RX_BUFFER_SIZE) > 0){
 170:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <rxBufPos>
 174:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <rxBufPos+0x1>
 178:	01 96       	adiw	r24, 0x01	; 1
 17a:	93 70       	andi	r25, 0x03	; 3
 17c:	89 2b       	or	r24, r25
 17e:	99 f0       	breq	.+38     	; 0x1a6 <save+0x36>
			rxBuffer[rxBufPos] = data;				//geht hier das ++ in der abfrage oder muss das nach kommen?
 180:	e0 91 17 01 	lds	r30, 0x0117	; 0x800117 <rxBufPos>
 184:	f0 91 18 01 	lds	r31, 0x0118	; 0x800118 <rxBufPos+0x1>
 188:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <data>
 18c:	e6 5e       	subi	r30, 0xE6	; 230
 18e:	fe 4f       	sbci	r31, 0xFE	; 254
 190:	80 83       	st	Z, r24
			rxBufPos++;
 192:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <rxBufPos>
 196:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <rxBufPos+0x1>
 19a:	01 96       	adiw	r24, 0x01	; 1
 19c:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <rxBufPos+0x1>
 1a0:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <rxBufPos>
 1a4:	0e c0       	rjmp	.+28     	; 0x1c2 <save+0x52>
		} else {
			memset(rxBuffer, 0, RX_BUFFER_SIZE);
 1a6:	80 e0       	ldi	r24, 0x00	; 0
 1a8:	94 e0       	ldi	r25, 0x04	; 4
 1aa:	ea e1       	ldi	r30, 0x1A	; 26
 1ac:	f1 e0       	ldi	r31, 0x01	; 1
 1ae:	df 01       	movw	r26, r30
 1b0:	9c 01       	movw	r18, r24
 1b2:	1d 92       	st	X+, r1
 1b4:	21 50       	subi	r18, 0x01	; 1
 1b6:	30 40       	sbci	r19, 0x00	; 0
 1b8:	e1 f7       	brne	.-8      	; 0x1b2 <save+0x42>
			startFlag = 0;
 1ba:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <startFlag>
			answearFlag = 0;
 1be:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <answearFlag>
		}
		
		if (rxBufPos >= 2) {
 1c2:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <rxBufPos>
 1c6:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <rxBufPos+0x1>
 1ca:	02 97       	sbiw	r24, 0x02	; 2
 1cc:	78 f1       	brcs	.+94     	; 0x22c <save+0xbc>
			if (rxBuffer[rxBufPos - 2] == '#' && rxBuffer[rxBufPos - 1] == '!') {
 1ce:	e0 91 17 01 	lds	r30, 0x0117	; 0x800117 <rxBufPos>
 1d2:	f0 91 18 01 	lds	r31, 0x0118	; 0x800118 <rxBufPos+0x1>
 1d6:	e8 5e       	subi	r30, 0xE8	; 232
 1d8:	fe 4f       	sbci	r31, 0xFE	; 254
 1da:	80 81       	ld	r24, Z
 1dc:	83 32       	cpi	r24, 0x23	; 35
 1de:	69 f4       	brne	.+26     	; 0x1fa <save+0x8a>
 1e0:	e0 91 17 01 	lds	r30, 0x0117	; 0x800117 <rxBufPos>
 1e4:	f0 91 18 01 	lds	r31, 0x0118	; 0x800118 <rxBufPos+0x1>
 1e8:	e7 5e       	subi	r30, 0xE7	; 231
 1ea:	fe 4f       	sbci	r31, 0xFE	; 254
 1ec:	80 81       	ld	r24, Z
 1ee:	81 32       	cpi	r24, 0x21	; 33
 1f0:	21 f4       	brne	.+8      	; 0x1fa <save+0x8a>
				startFlag = 1;
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <startFlag>
 1f8:	08 95       	ret
			} else if (rxBuffer[rxBufPos - 2] == '#' && rxBuffer[rxBufPos - 1] == '$') {
 1fa:	e0 91 17 01 	lds	r30, 0x0117	; 0x800117 <rxBufPos>
 1fe:	f0 91 18 01 	lds	r31, 0x0118	; 0x800118 <rxBufPos+0x1>
 202:	e8 5e       	subi	r30, 0xE8	; 232
 204:	fe 4f       	sbci	r31, 0xFE	; 254
 206:	80 81       	ld	r24, Z
 208:	83 32       	cpi	r24, 0x23	; 35
 20a:	81 f4       	brne	.+32     	; 0x22c <save+0xbc>
 20c:	e0 91 17 01 	lds	r30, 0x0117	; 0x800117 <rxBufPos>
 210:	f0 91 18 01 	lds	r31, 0x0118	; 0x800118 <rxBufPos+0x1>
 214:	e7 5e       	subi	r30, 0xE7	; 231
 216:	fe 4f       	sbci	r31, 0xFE	; 254
 218:	80 81       	ld	r24, Z
 21a:	84 32       	cpi	r24, 0x24	; 36
 21c:	39 f4       	brne	.+14     	; 0x22c <save+0xbc>
				answearFlag = 1;
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <answearFlag>
			PORTB ^= ( 1 << PB5 );
 224:	95 b1       	in	r25, 0x05	; 5
 226:	80 e2       	ldi	r24, 0x20	; 32
 228:	89 27       	eor	r24, r25
 22a:	85 b9       	out	0x05, r24	; 5
 22c:	08 95       	ret

0000022e <__vector_18>:
			}
		}
}

ISR(USART_RX_vect){
 22e:	1f 92       	push	r1
 230:	0f 92       	push	r0
 232:	0f b6       	in	r0, 0x3f	; 63
 234:	0f 92       	push	r0
 236:	11 24       	eor	r1, r1
 238:	8f 93       	push	r24
	data = UDR0;
 23a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 23e:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <data>
	gotcalled = 1;
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
			//PORTB ^= ( 1 << PB5 );
		//}
		//
	//}
	//sei();
}
 248:	8f 91       	pop	r24
 24a:	0f 90       	pop	r0
 24c:	0f be       	out	0x3f, r0	; 63
 24e:	0f 90       	pop	r0
 250:	1f 90       	pop	r1
 252:	18 95       	reti

00000254 <__udivmodsi4>:
 254:	a1 e2       	ldi	r26, 0x21	; 33
 256:	1a 2e       	mov	r1, r26
 258:	aa 1b       	sub	r26, r26
 25a:	bb 1b       	sub	r27, r27
 25c:	fd 01       	movw	r30, r26
 25e:	0d c0       	rjmp	.+26     	; 0x27a <__udivmodsi4_ep>

00000260 <__udivmodsi4_loop>:
 260:	aa 1f       	adc	r26, r26
 262:	bb 1f       	adc	r27, r27
 264:	ee 1f       	adc	r30, r30
 266:	ff 1f       	adc	r31, r31
 268:	a2 17       	cp	r26, r18
 26a:	b3 07       	cpc	r27, r19
 26c:	e4 07       	cpc	r30, r20
 26e:	f5 07       	cpc	r31, r21
 270:	20 f0       	brcs	.+8      	; 0x27a <__udivmodsi4_ep>
 272:	a2 1b       	sub	r26, r18
 274:	b3 0b       	sbc	r27, r19
 276:	e4 0b       	sbc	r30, r20
 278:	f5 0b       	sbc	r31, r21

0000027a <__udivmodsi4_ep>:
 27a:	66 1f       	adc	r22, r22
 27c:	77 1f       	adc	r23, r23
 27e:	88 1f       	adc	r24, r24
 280:	99 1f       	adc	r25, r25
 282:	1a 94       	dec	r1
 284:	69 f7       	brne	.-38     	; 0x260 <__udivmodsi4_loop>
 286:	60 95       	com	r22
 288:	70 95       	com	r23
 28a:	80 95       	com	r24
 28c:	90 95       	com	r25
 28e:	9b 01       	movw	r18, r22
 290:	ac 01       	movw	r20, r24
 292:	bd 01       	movw	r22, r26
 294:	cf 01       	movw	r24, r30
 296:	08 95       	ret

00000298 <eeprom_update_block>:
 298:	dc 01       	movw	r26, r24
 29a:	a4 0f       	add	r26, r20
 29c:	b5 1f       	adc	r27, r21
 29e:	41 50       	subi	r20, 0x01	; 1
 2a0:	50 40       	sbci	r21, 0x00	; 0
 2a2:	48 f0       	brcs	.+18     	; 0x2b6 <eeprom_update_block+0x1e>
 2a4:	cb 01       	movw	r24, r22
 2a6:	84 0f       	add	r24, r20
 2a8:	95 1f       	adc	r25, r21
 2aa:	2e 91       	ld	r18, -X
 2ac:	0e 94 5d 01 	call	0x2ba	; 0x2ba <eeprom_update_r18>
 2b0:	41 50       	subi	r20, 0x01	; 1
 2b2:	50 40       	sbci	r21, 0x00	; 0
 2b4:	d0 f7       	brcc	.-12     	; 0x2aa <eeprom_update_block+0x12>
 2b6:	08 95       	ret

000002b8 <eeprom_update_byte>:
 2b8:	26 2f       	mov	r18, r22

000002ba <eeprom_update_r18>:
 2ba:	f9 99       	sbic	0x1f, 1	; 31
 2bc:	fe cf       	rjmp	.-4      	; 0x2ba <eeprom_update_r18>
 2be:	92 bd       	out	0x22, r25	; 34
 2c0:	81 bd       	out	0x21, r24	; 33
 2c2:	f8 9a       	sbi	0x1f, 0	; 31
 2c4:	01 97       	sbiw	r24, 0x01	; 1
 2c6:	00 b4       	in	r0, 0x20	; 32
 2c8:	02 16       	cp	r0, r18
 2ca:	39 f0       	breq	.+14     	; 0x2da <eeprom_update_r18+0x20>
 2cc:	1f ba       	out	0x1f, r1	; 31
 2ce:	20 bd       	out	0x20, r18	; 32
 2d0:	0f b6       	in	r0, 0x3f	; 63
 2d2:	f8 94       	cli
 2d4:	fa 9a       	sbi	0x1f, 2	; 31
 2d6:	f9 9a       	sbi	0x1f, 1	; 31
 2d8:	0f be       	out	0x3f, r0	; 63
 2da:	08 95       	ret

000002dc <_exit>:
 2dc:	f8 94       	cli

000002de <__stop_program>:
 2de:	ff cf       	rjmp	.-2      	; 0x2de <__stop_program>
